[{"content":"此类为TextBox的一个扩展类，其中包含四个附加属性，分别是：\n属性 IntegerRange Minimum Maximum PreviousValue 类型 bool int int string 定义 是否启用范围判定 最小值 最大值 前一个有效值 默认值 false 0 int的最大值 空 实现了以下功能：\n若输入的值不满足最小值和最大值的范围或输入不合法时，则会自动恢复为前一个有效值 解决了粘贴时的输入验证问题 解决了用户选中文本后输入的问题 解决了当最小值大于9时，无法输入数字的问题 源代码：\npublic static class TextBoxExtensions { #region IntegerRange public static readonly DependencyProperty IntegerRangeProperty = DependencyProperty.RegisterAttached( \u0026#34;IntegerRange\u0026#34;, typeof(bool), typeof(TextBoxExtensions), new PropertyMetadata(false, OnIntegerRangeChanged)); public static bool GetIntegerRange(DependencyObject target) { return (bool)target.GetValue(IntegerRangeProperty); } public static void SetIntegerRange(DependencyObject target, bool value) { target.SetValue(IntegerRangeProperty, value); } #endregion #region Minimum public static readonly DependencyProperty MinimumProperty = DependencyProperty.RegisterAttached( \u0026#34;Minimum\u0026#34;, typeof(int), typeof(TextBoxExtensions), new PropertyMetadata(0)); public static int GetMinimum(DependencyObject target) { return (int)target.GetValue(MinimumProperty); } public static void SetMinimum(DependencyObject target, int value) { target.SetValue(MinimumProperty, value); } #endregion #region Maximum public static readonly DependencyProperty MaximumProperty = DependencyProperty.RegisterAttached( \u0026#34;Maximum\u0026#34;, typeof(int), typeof(TextBoxExtensions), new PropertyMetadata(int.MaxValue)); public static int GetMaximum(DependencyObject target) { return (int)target.GetValue(MaximumProperty); } public static void SetMaximum(DependencyObject target, int value) { target.SetValue(MaximumProperty, value); } #endregion #region PreviousValue public static readonly DependencyProperty PreviousValueProperty = DependencyProperty.RegisterAttached(\u0026#34;PreviousValue\u0026#34;, typeof(string), typeof(TextBoxExtensions)); public static string GetPreviousValue(DependencyObject obj) { return (string)obj.GetValue(PreviousValueProperty); } public static void SetPreviousValue(DependencyObject obj, string value) { obj.SetValue(PreviousValueProperty, value); } #endregion private static void OnIntegerRangeChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e) { TextBox textBox = sender as TextBox; if (textBox != null) { if ((bool)e.NewValue) { textBox.PreviewTextInput += TextBox_PreviewTextInput; DataObject.AddPastingHandler(textBox, TextBox_Pasting); textBox.LostFocus += TextBox_LostFocus; } else { textBox.PreviewTextInput -= TextBox_PreviewTextInput; DataObject.RemovePastingHandler(textBox, TextBox_Pasting); textBox.LostFocus -= TextBox_LostFocus; } } } private static void TextBox_PreviewTextInput(object sender, TextCompositionEventArgs e) { TextBox textBox = (TextBox)sender; string fullText = textBox.SelectionLength \u0026gt; 0 ? textBox.Text.Remove(textBox.SelectionStart, textBox.SelectionLength).Insert(textBox.SelectionStart, e.Text) : textBox.Text.Insert(textBox.SelectionStart, e.Text); int value; int maximum = GetMaximum(textBox); if (!int.TryParse(fullText, out value) || value \u0026gt; maximum) { e.Handled = true; } else { // If the text is valid, update the PreviousValue property SetPreviousValue(textBox, textBox.Text); } } private static void TextBox_LostFocus(object sender, RoutedEventArgs e) { TextBox textBox = (TextBox)sender; int value; int minimum = GetMinimum(textBox); if (int.TryParse(textBox.Text, out value) \u0026amp;\u0026amp; value \u0026lt; minimum) { // If the value is less than the minimum, set the text to the previous value textBox.Text = GetPreviousValue(textBox); } } private static void TextBox_Pasting(object sender, DataObjectPastingEventArgs e) { TextBox textBox = (TextBox)sender; string pasteText = e.DataObject.GetData(typeof(string)) as string; string fullText = textBox.SelectionLength \u0026gt; 0 ? textBox.Text.Remove(textBox.SelectionStart, textBox.SelectionLength).Insert(textBox.SelectionStart, pasteText) : textBox.Text.Insert(textBox.SelectionStart, pasteText); int value; int minimum = GetMinimum(textBox); int maximum = GetMaximum(textBox); if (!int.TryParse(fullText, out value) || value \u0026lt; minimum || value \u0026gt; maximum) { e.CancelCommand(); } } } ","permalink":"https://edinik.com/posts/tech/wpf-textbox-input-range-validation/","summary":"此类为TextBox的一个扩展类，其中包含四个附加属性，分别是： 属性 IntegerRange Minimum Maximum PreviousValue 类型 bool int int string 定义 是否启用范围判定 最小值 最大值 前一个有效值 默认值 false 0 int的最大值 空 实现了以下功能： 若输入的值不满足最小值和最大值的范围或输入不合法时，则会自动恢复为前一个有效值 解决了粘贴时的输入验证问题 解","title":"WPF | TextBox输入范围验证"},{"content":"定义 单例模式（Singleton Design Pattern）是一种创建型设计模式，它能够保证一个类只有一个实例，并提供一个访问该实例的全局节点。\n三个必要条件：\n构造函数必须是私有的，保证类的外部不能创建类的实例。 通过一个私有的静态变量来存储其唯一实例。 通过提供一个公开的静态方法，使得外部使用者可以访问类的唯一实例。 三个必要问题：\n是否线程安全 是否延时加载 是否需要加锁（锁会导致低性能） 实现 版本一：懒汉式（不推荐） 线程安全 延迟加载 加锁 否 是 创建对象时未加锁，获取对象时未加锁 public sealed class Singleton { private static Singleton _instance = null; private Singleton() { } public static Singleton Instance { get { if (_instance == null) { _instance = new Singleton(); } return _instance; } } } 版本二：懒汉式（一般推荐） 线程安全 延迟加载 加锁 是 是 创建对象时加锁，获取对象时加锁 public sealed class Singleton { private static Singleton _instance = null; private static readonly object InstanceLock = new(); private Singleton() { } public static Singleton Instance { get { lock (InstanceLock) { if (_instance == null) { _instance = new Singleton(); } return _instance; } } } } 版本三：双重检测（不推荐，不如版本五） 线程安全 延迟加载 加锁 是 是 创建对象时加锁，获取对象时未加锁 public sealed class Singleton { private static Singleton _instance = null; private static readonly object InstanceLock = new object(); private Singleton() { } public static Singleton Instance { get { if (_instance == null) { lock (InstanceLock) { if (_instance == null) { _instance = new Singleton(); } } } return _instance; } } } 版本四：饿汉式（推荐） 线程安全 延迟加载 加锁 是 否 创建对象时未加锁，获取对象时未加锁 public sealed class Singleton { private static Singleton instance = new Singleton(); static Singleton() { } private Singleton() { } public static Singleton Instance { get { return instance; } } } 版本五：躺平式-静态内部类（推荐） 线程安全 延迟加载 加锁 是 是 创建对象时未加锁，获取对象时未加锁 public sealed class Singleton { private Singleton() { } public static Singleton instance { get { return Nested.instance; } } private class Nested { static Nested() { } internal static readonly Singleton instance = new Singleton(); } } 版本六：.NET4 的 Lazy\u0026lt;T\u0026gt; 类型（强烈推荐） 线程安全 延迟加载 加锁 是 是 创建对象时未加锁，获取对象时未加锁 public sealed class Singleton { private static readonly Lazy\u0026lt;Singleton\u0026gt; Lazy = new(() =\u0026gt; new Singleton()); public static Singleton Instance =\u0026gt; Lazy.Value; private Singleton() { } } 参考资料 单例模式 单例模式的五种实现方式及优缺点 深入理解 C#： 单例的实现 重温设计模式 \u0026mdash; 单例模式 ","permalink":"https://edinik.com/posts/tech/design-pattern-singleton/","summary":"定义 单例模式（Singleton Design Pattern）是一种创建型设计模式，它能够保证一个类只有一个实例，并提供一个访问该实例的全局节点。 三个必要条件： 构造函数必须是私有的，保证类的外部不能创建类的实例。 通过一个私有的静态变量来存储其唯一实例。 通过提供一个公开的静态方法，使得外部使用","title":"设计模式 | 单例模式"},{"content":"Michelangelo 米开朗基罗 米开朗基罗·布奥纳罗蒂（Michelangelo di Lodovico Buonarroti Simoni，1475年3月6日—1564年2月18日），通常被简称为米开朗基罗，是意大利文艺复兴时期的一位多才多艺的艺术家。他的作品在雕塑、绘画和建筑上都达到了非常高的成就。\n米开朗基罗在他的生涯中创造了一些最有影响力和最有名的艺术作品。他是《大卫》和《圣母怜子》雕塑的作者，也是梵蒂冈西斯廷教堂穹顶上《创世纪》和《最后的审判》壁画的画家。在建筑方面，他设计了罗马圣彼得大教堂的圆顶，这是世界最大的宗教建筑。\n米开朗基罗的作品展示了他对人体形态的深刻理解和对运动和姿态的精致刻画，他的艺术创新和对美的追求对后世产生了深远影响。他的作品被誉为西方艺术的巅峰之作，他本人也被誉为西方艺术史上最伟大的艺术家之一。\na dalmatian sculpture against a solid-color background,Michelangelo --q 2 --s 250 --v 5.1 --style raw Monet 莫奈 克洛德·莫奈（Claude Monet, 1840年11月14日—1926年12月5日）是一位法国画家，他是印象派画风的创始人和最重要的代表人物之一。他的创新性的作品使他在艺术界中产生了广泛和深远的影响，被誉为是“光和气氛的大师”。\n莫奈的作品尝试捕捉光线、色彩和大自然的变化，他经常在不同的时间、光线和天气条件下画同一个景物，以展示这些因素如何影响景物的外观。他最著名的系列作品包括《睡莲》、《印象·日出》（这幅画的标题给了印象派这个名字）和《海勃利的麦田》。\n莫奈在生活中也表现出对大自然的热爱，他在法国吉维尼的家中创造了一个美丽的花园，并在那里创作了许多画作。他的作品充满了生活的色彩和活力，通过他的画笔，观众可以感受到他对大自然的热爱和对生活的热情。\nAt sunrise, a pair of black swans swim past water lilies,Monet --q 2 --s 250 --v 5.1 --style raw Paul Cezanne 保罗-塞尚 保罗·塞尚（Paul Cézanne, 1839年1月19日—1906年10月22日）是一位法国后印象派画家，他的作品在20世纪的艺术发展中起到了关键的作用。他的创新性的绘画方法和对形式、色彩和构图的独特理解对立体主义和抽象艺术产生了深远的影响，因此他被誉为“现代艺术的桥梁”。\n塞尚的作品充满了对大自然和日常生活的深入观察。他的风景画、静物画和人物肖像都展示了他对色彩和形状的精致感知，同时通过对构图的精心安排，他创造了一种充满稳定和和谐的视觉体验。\n他最著名的作品包括《卡多的大桥》、《圣维克托的山》和《静物画：苹果和桔子》。他的画作风格独特，通过粗犷的笔触和浓厚的颜色，他将自己的情感和对自然的理解淋漓尽致地表达出来。塞尚对艺术的探索和创新赢得了他在艺术史上的崇高地位。\nDaenerys Targaryen sitting on the Iron Throne,Paul Cezanne --q 2 --s 250 --v 5.1 --style raw Mark Rothko 马克-罗斯科 马克·罗斯科（Mark Rothko, 1903年9月25日—1970年2月25日）是一位出生于拉脱维亚的美国抽象表现主义画家，他以其独特的色彩场绘画风格而闻名。他的作品以大块的鲜明色彩和深思熟虑的构图，创建出一种能够唤起观众深层情感反应的视觉体验。\n罗斯科的大部分作品都是由几个相互重叠的色彩区域组成，这些色彩区域的边缘都是模糊的，彼此之间的过渡自然而流畅。他的画作通常没有明确的主题，而是通过色彩和形状来表达一种情感或精神状态。\n尽管他的作品在形式上非常简单，但罗斯科的绘画却被视为是一种高度个人化和表达主义的艺术形式。他希望他的作品能够与观众产生直接的、情感上的交流，他曾经说过：“我对简单的子弹头或死亡的人没有任何兴趣。我对\u0026rsquo;人\u0026rsquo;的悲剧感兴趣。”\n罗斯科的作品在艺术界和公众中都受到了广泛的赞誉。他的一些最著名的作品包括《橙色，红色，黄色》和《黑色在红色上》。他在艺术史上留下了深远的影响，他的作品对抽象表现主义和其他20世纪的艺术运动产生了深远的影响。\nA cute Corgi lying down,Mark Rothko --q 2 --s 250 --v 5.1 --style raw Paul Klee 保罗-克利 保罗·克利（Paul Klee, 1879年12月18日—1940年6月29日）是一位瑞士-德国艺术家，他的作品涵盖了许多不同的艺术运动，包括表现主义、立体主义和超现实主义。他以其深邃的象征和隐喻，以及他对颜色和线条的独特运用而闻名。\n克利的作品多样而复杂，他的画作通常包含了抽象的形状和符号，以及生动的色彩。他的许多作品都包含了一种梦幻或神秘的质感，这是他试图探索内心世界和隐藏的现实的结果。他曾经说过：“艺术并不再现可见的，而是使可见”。\n他的一些最著名的作品包括《金鱼》、《透视花园》和《老城》。他在艺术教育方面也有重要贡献，他曾在德国的包豪斯学派任教，他的讲座和理论对20世纪的艺术教育产生了深远影响。\n克利的作品在艺术史上具有重要地位，他的创新性的视觉语言和深思熟虑的艺术哲学对现代和当代艺术产生了深远的影响。\nIn a colorful wheat field under the sunset, there is a house and a windmill,Paul Klee --q 2 --s 250 --v 5.1 --style raw Picasso 毕加索 巴勃罗·毕加索（Pablo Picasso, 1881年10月25日—1973年4月8日）是一位西班牙画家、雕塑家、版画家、陶艺家和舞台设计师，他是20世纪艺术的重要人物，被誉为现代艺术的共同创始人。\n毕加索以其多元化的风格和技术而闻名，他的艺术生涯通常被划分为几个阶段，包括蓝色时期、粉红色时期、非洲艺术启发的时期、立体主义时期和后期的各种风格。他在生涯中创作了约20000多件艺术作品，包括画作、雕塑、陶瓷、版画和纺织品。\n他的立体主义作品，尤其是1907年的《亚威农的少女》，被认为是现代艺术的开端。立体主义打破了传统的透视画法，以一种新的方式展示物体的多个面，这在艺术史上产生了革命性的影响。\n毕加索的创新性和创造力使他成为一位艺术巨匠，他的作品在艺术史上留下了深远的影响。他的一生充满了不断的探索和实验，他曾经说过：“我不是在寻找，我是在发现。”这段话很好地表达了他对艺术创作的态度和哲学。\nA cute cat and a cute dog playfully frolicking in a cozy room,Picasso --q 2 --s 250 --v 5.1 --style raw Piet Mondrian 皮特-蒙德里安 皮特·蒙德里安（Piet Mondrian, 1872年3月7日—1944年2月1日）是一位荷兰画家，他以其简约的抽象风格和对基本形状和颜色的独特运用而闻名，被誉为是抽象艺术的先驱之一。\n蒙德里安的早期作品主要是风景画和静物画，但在20世纪初，他开始转向抽象艺术。他的作品逐渐简化，最终演变成由纯黑的直线、白色背景和红色、蓝色和黄色的基本色块组成的画作。这种风格被称为新造型主义或者德斯提尔风格，是20世纪最具影响力的艺术运动之一。\n蒙德里安的作品试图捕捉到现实世界的基本结构和秩序。他的一些最著名的作品包括《红、黄、蓝和黑》和《广场》系列。他的艺术哲学和作品对后世产生了深远影响，他的简洁和抽象的视觉语言对现代艺术和设计有着重要的影响。\nLadies\u0026#39; fashion backpack,Piet Mondrian --q 2 --s 250 --v 5.1 --style raw Pierre Auguste Renoir 皮埃尔-奥古斯特-雷诺阿 皮埃尔·奥古斯特·雷诺阿（Pierre-Auguste Renoir, 1841年2月25日—1919年12月3日）是一位法国画家，他是印象派运动的主要成员之一。他的作品以其鲜艳的色彩、充满活力的笔触和对人物和风景的生动描绘而闻名。\n雷诺阿的画作通常充满了生活的乐趣和欢快的气氛。他的作品经常描绘日常生活的场景，包括咖啡馆、舞会、公园和家庭聚会。他的人物肖像和女性形象尤其受到赞誉，他的作品常常展现出对人物的温柔和同情的理解。\n他的一些最著名的作品包括《午餐的舞会》、《大浴》和《雨伞》。尽管他的健康在晚年逐渐恶化，但他仍然坚持创作，他的作品在艺术史上具有重要地位。\n雷诺阿的作品在他的一生中受到了广泛的赞誉，他的生动和感人的画作对印象派和后印象派的艺术家产生了深远的影响。他的艺术才华和对生活的热爱使他成为了一位备受敬仰的艺术家。\nA girl crouching to photograph flowers, with a boy leaning next to her,Pierre Auguste Renoir --q 2 --s 250 --v 5.1 --style raw ","permalink":"https://edinik.com/posts/tech/midjourney-artists-01/","summary":"Michelangelo 米开朗基罗 米开朗基罗·布奥纳罗蒂（Michelangelo di Lodovico Buonarroti Simoni，1475年3月6日—1564年2月18日），通常被简称为米开朗基罗，是意大利文艺复兴时期的一位多才多艺的艺术家。他的作品在雕塑、绘画和建筑上都达到了非常高的成就。 米开朗基罗在他的生涯中创造了一些最有影","title":"midjourney | artists 01"},{"content":"etching 蚀刻 Etching是一种版画形式的艺术风格，通过使用酸或腐蚀剂将图案蚀刻到金属板上。艺术家在防腐蚀剂上刻画图案，然后浸入腐蚀剂中形成凹槽。这种风格以其精细的线条和阴影效果而闻名，产生丰富的纹理和细节。\na castle,etching --q 2 --s 250 --v 5.1 --style raw extraterrestrial 地外世界 Extraterrestrial艺术风格是一种与外星生物、外太空和外星文化相关的艺术创作，它融合了奇幻、科幻和未来主义元素，通过独特的图像、形状和色彩创造出神秘、陌生和超现实的视觉效果。这种风格探索宇宙的想象力，描绘外星生物、外星世界和太空探险等主题，激发观众对未知事物的思考，并展示了艺术家们对宇宙奥秘的创造力和热情。\na castle,extraterrestrial --q 2 --s 250 --v 5.1 --style raw glitch art 缝隙艺术 Glitch art是一种利用数字和技术错误、故障、失真等意外干扰来创造独特视觉效果的艺术风格。它突出了数字媒体的漏洞和不完美之处，并将其视为创造性的表达方式。通过对数字图像、视频或音频进行有意或无意的破坏和篡改，创作者能够产生错位、颜色失真、重叠等视觉效果。\na castle,glitch art --q 2 --s 250 --v 5.1 --style raw gouache 水粉画 Gouache艺术风格是一种使用水溶性颜料和胶粘剂创作的绘画媒介，以其丰富、不透明的颜色效果而著名。这种风格与水彩有些相似，但更浓郁、易于控制。Gouache作品呈现饱满的色彩、清晰的线条和平面感。艺术家可以运用各种技巧和手法，如叠加、拓印、湿画法和干画法，创造出独特的视觉效果。\na castle,gouache --q 2 --s 250 --v 5.1 --style raw floral 花卉类的 Floral艺术风格是以花卉为主题的艺术创作风格，通过描绘花朵和植物的美丽和多样性展现其魅力。这种风格可以以写实或抽象的方式表达，通过细致的细节或大胆的色彩和线条来呈现花卉的形态和情感。艺术家们在选择花卉品种、运用不同绘画技巧和媒介的同时，也将其与其他元素结合，创造出层次丰富的作品。\na castle,floral --q 2 --s 250 --v 5.1 --style raw fractal 分形 Fractal艺术风格是基于分形几何学原理的一种艺术创作风格，利用复杂的重复模式和自相似性创造出视觉上令人惊叹和复杂的艺术作品。这种风格通过计算机生成算法或手工绘制来实现，呈现出迷离、神秘和华丽的视觉效果。\na castle,fractal --q 2 --s 250 --v 5.1 --style raw pre historic 前历史性的 Prehistoric艺术风格是人类历史上早期时期创作的艺术作品和风格，以洞穴壁画和岩石雕刻为主要形式。这些作品描绘了动物、狩猎场景、人物形象和抽象图案，通过简化的形状、粗糙的线条和基本的颜色传达古代人类与环境、自然和生活的关系。\na castle,pre historic --q 2 --s 250 --v 5.1 --style raw prokaryotic 原核生物 原核生物（Prokaryotes）是一类细胞结构相对简单的生物，包括细菌和古菌。它们的特征包括没有真正的细胞核，缺乏膜结构的细胞器，体积较小，DNA以环形分子存在，以及通过二分裂进行繁殖。尽管结构简单，原核生物在生态系统中却有着重要的作用，包括分解有机物、氮固定、光合作用等，并在人类生活中应用广泛，如食品和药物生产，但也有一些原核生物会导致疾病。\na castle,prokaryotic --q 2 --s 250 --v 5.1 --style raw ","permalink":"https://edinik.com/posts/tech/midjourney-styles-08/","summary":"etching 蚀刻 Etching是一种版画形式的艺术风格，通过使用酸或腐蚀剂将图案蚀刻到金属板上。艺术家在防腐蚀剂上刻画图案，然后浸入腐蚀剂中形成凹槽。这种风格以其精细的线条和阴影效果而闻名，产生丰富的纹理和细节。 a castle,etching --q 2 --s 250 --v 5.1 --style raw extraterrestrial 地外世界 Extraterrestrial艺术风格是一种与","title":"midjourney | styles 08"},{"content":"lightspeed 光速 在绘画中，艺术家可以运用不同的色彩和阴影来表现光线的效果，以此营造出明暗对比强烈、光影流动的效果。此外，在新媒体艺术或装置艺术中，使用LED灯等可以制造出闪耀的光线效果，创造出视觉上的震撼效果。\na castle,lightspeed --q 2 --style raw --s 250 liquid 液体 \u0026ldquo;液态艺术\u0026rdquo;（Liquid Art）是一种以液体和流体为表现元素的艺术风格，其创作形式包括绘画、雕塑、摄影等。在液态艺术中，艺术家常常运用颜料、水墨、油漆等材料，以流动、渗透、蔓延等方式来表现色彩和形状的变化。这种艺术风格强调色彩与形式之间的互动关系，并且通常具有柔和、温暖的感觉，也可以通过液体的动态流动来探索情感和内心世界的表达。\na castle,liquid --q 2 --style raw --s 250 dots 点状 \u0026ldquo;点彩派\u0026rdquo;（Pointillism）是一种以色点为表现元素的绘画风格，主要流行于19世纪末至20世纪初的法国艺术界。点彩派绘画中，艺术家通过运用不同色彩的小颗粒（点），在观察距离适宜的情况下，让人眼产生混合作用，从而呈现出更加明亮、光滑的色彩效果，营造出强烈的视觉冲击力。点彩派风格强调对自然环境和光线的敏锐观察，印象派的艺术理念对其产生了深远影响。\na castle, dots --q 2 --style raw --s 250 dune 沙丘 \u0026ldquo;Dune\u0026quot;在艺术领域中通常用来形容沙漠或沙丘等地貌元素所激发的创作灵感或表现形式。例如，一些摄影师和画家可能会通过捕捉或描绘沙漠中的光影、纹理和色彩等元素来呈现出\u0026quot;Dune\u0026quot;风格的作品。此外，在一些装置艺术和环境艺术中，艺术家也能够利用沙漠中的自然元素或人工构造物来创造出\u0026quot;Dune\u0026quot;式的视觉效果和氛围。\na castle, dune--q 2 --style raw --s 250 dripping paint 滴落的油漆 \u0026ldquo;Dripping Paint\u0026quot;是一种绘画技法，也可以被视为一种艺术风格。它最初由美国抽象表现主义艺术家杰克逊·波洛克（Jackson Pollock）在20世纪40年代创造并广泛应用于他的绘画作品中。该技法主要通过将颜料倒在画布上，让其任意滴落、流淌或喷溅，从而形成具有随机性和自发性的线条和色块组合。这种技法的出现极大地推动了抽象表现主义艺术的发展，并对后来的绘画、雕塑等领域产生了重要影响。\na castle,dripping paint --q 2 --style raw --s 250 electronic circuitry 电子电路 \u0026ldquo;Electronic Circuitry\u0026quot;是指电子电路的设计和构造。在艺术领域中，一些艺术家也会运用电路板、电子元器件等材料来创作出基于电子技术的装置艺术或新媒体艺术作品。这些作品通常以电子信号、光线、声音等元素为媒介，通过交互式的方式与观众进行沟通和互动。这种艺术形式既强调了技术和科学的创新性和复杂性，又赋予了艺术作品更多维度的意义和表现力。\na castle,electronic circuitry --q 2 --style raw --s 250 electrical 电气的 \u0026ldquo;Electrical\u0026quot;意为“电的”或“与电有关的”，在艺术领域中，可以指代一种以电子科技和电气元素为创作媒介的艺术形式。例如，在新媒体艺术中，艺术家可以运用计算机程序、传感器等电子技术来创造出交互式的、动态的艺术作品。在装置艺术中，电气元件和线路通常被用作构成装置的基本部分，营造出强烈的现代感和未来感。\na castle,electrical --q 2 --style raw --s 250 futuristic 未来的 \u0026ldquo;Futuristic\u0026rdquo; 意为“未来主义的”，在艺术领域中，可以指代一种以未来科技、社会和文化为主题和灵感的艺术风格。这种风格通常强调创新性、科技感和未来感，运用前卫的材料、技术和设计元素，表现出对未来社会和生活的展望和想象。此外，未来主义艺术还经常涉及到人与科技、环境和可持续发展等话题，反映出对未来社会发展方向的思考和讨论。\na castle,futuristic --q 2 --style raw --s 250 ","permalink":"https://edinik.com/posts/tech/midjourney-styles-07/","summary":"lightspeed 光速 在绘画中，艺术家可以运用不同的色彩和阴影来表现光线的效果，以此营造出明暗对比强烈、光影流动的效果。此外，在新媒体艺术或装置艺术中，使用LED灯等可以制造出闪耀的光线效果，创造出视觉上的震撼效果。 a castle,lightspeed --q 2 --style raw --s 250 liquid 液体 \u0026ldquo;液态艺术\u0026rdquo;（Liquid Art）","title":"midjourney | styles 07"},{"content":"charcoal style 炭色风格 Charcoal style（炭色风格）是一种艺术风格，通常用于绘画、素描和插图。它以黑色和灰色的炭笔线条为主要特征，创造出浓重的阴影和强烈的对比效果。Charcoal style的作品通常具有粗糙、自然和充满生命力的特点，能够表现出深沉、神秘或者动感的氛围。\na castle,charcoal style --q 2 --style raw --s 250 chromatic 色度 Chromatic（色度）艺术风格强调色彩的运用，通过强烈的对比和大胆的组合来营造出强烈的视觉冲击力。它通常包括明亮、鲜艳或者深沉的颜色，并使用非传统的配色方案。常常使用强烈的色彩表现技巧来创作出动感的形象，例如光线和阴影的变化、抽象的几何图形和生动的印象派描绘。同时，这种艺术风格也能够表达出情感上的丰富和复杂性，营造出令人难忘的视觉体验。\na castle,chromatic --q 2 --style raw --s 250 coral 珊瑚 Coral（珊瑚）艺术风格是一种大自然为灵感的艺术风格，通常以珊瑚礁、海洋和海底生物为主题。这种艺术风格以丰富的颜色和形状来描绘珊瑚及其周围的环境，创造出柔和而流畅的线条和形态。\na castle,coral --q 2 --style raw --s 250 concept art 概念艺术 概念艺术风格是指在游戏、电影等媒介中用来创造虚拟世界的艺术风格，通常强调形式感和想象力，包括手绘式、照片现实主义、卡通风格、印象派和线条式等多种风格。\na castle,concept art --q 2 --style raw --s 250 fibonacci 斐波那契数列 斐波那契艺术风格是一种以斐波那契数列为基础的艺术风格，利用黄金分割比例和类似于斐波那契数列中数字间的关联性来安排构图元素。这种艺术风格具有一定的对称美和视觉节奏感，同时展现出科技与自然之美的融合，在自然界中也有广泛的应用。\na castle,fabonacci --q 2 --style raw --s 250 cyberpunk 赛博朋克 赛博朋克（Cyberpunk）是一种“高科技低生活”为主题的文化现象，是一种极具个性和未来感的艺术风格。该风格强调科技的进步与对人类社会的消极影响，通常创造出一个信息高度发达、物质高度匮乏、黑暗、堕落、注重个人自由的未来世界。赛博朋克艺术风格的特点包括技术感和机电感强烈、深色调或亮度较低、复杂的机械结构和线条等。\na castle,cyberpunk --q 2 --style raw --s 250 diabolic 堕落的 Diabolic艺术风格是一种强调黑暗、狂野、诡异和不规则形态的艺术风格，常用于表现邪恶、恐怖或神秘的主题。这种艺术风格通常使用黑色和灰色调，并加入鲜艳的颜色以突出画面重点，创造出充满角度感和动态感的线条和形态，强调想象力和创造性，以达到惊悚、狂野和不安的效果。\na castle,diabolic --q 2 --style raw --s 250 diffraction grading 衍射光栅 衍射光栅艺术风格（Diffraction Grating Art Style）源于物理学中的光学干涉现象，通过利用衍射光栅的特性创造出美学上的视觉效果。这种艺术风格强调形式感和色彩感，通常具有科技感和未来感，注重对颜色的运用，营造出丰富多彩的视觉效果。衍射光栅艺术风格被广泛应用于数码艺术、电影和游戏设计等方面，以创造出独特的视觉效果和体验。\na castle,diffraction grading --q 2 --style raw --s 250 ","permalink":"https://edinik.com/posts/tech/midjourney-styles-06/","summary":"charcoal style 炭色风格 Charcoal style（炭色风格）是一种艺术风格，通常用于绘画、素描和插图。它以黑色和灰色的炭笔线条为主要特征，创造出浓重的阴影和强烈的对比效果。Charcoal style的作品通常具有粗糙、自然和充满生命力的特点，能够表现出深沉、神秘或者动感的氛围。 a castle,charcoal style --q 2 --style raw --s 250 chromatic 色度 C","title":"midjourney | styles 06"},{"content":"arabic 阿拉伯 Arabic艺术风格是指源自阿拉伯文化传统的艺术表现形式，包括建筑、绘画、书法、陶瓷等多种艺术形式。这种艺术风格以其复杂、华丽的几何图案和线条为特征，在使用色彩方面通常以鲜艳的色彩为主。Arabic艺术风格在设计中注重对称美学，讲究每一个元素的平衡和协调性，并在表达中融入了宗教、历史和文化的元素。这种艺术风格被广泛运用于阿拉伯世界的建筑、装饰、服装、珠宝等领域，并在全球范围内影响了其他艺术家和设计师的创作。\na castle,arabic --q 2 --s 250 --style raw blocky 块状的 方块艺术风格是一种独特的数字艺术风格，它以像素化的图形和基础几何形状为主要特征。这种风格通常使用鲜艳的色彩和简单的线条，营造出简洁而富有现代感的视觉效果。\na castle,blocky --q 2 --s 250 --style raw blueprint 蓝图 Blueprint艺术风格是一种以技术蓝图为基础的数字艺术风格，通常包括线条轮廓和实体物品之间的连接关系等元素。这种风格具有严谨和简约的特点，大多数作品都以白色或浅蓝色为主色调，并使用粗细不一的线条来表现出清晰的结构和形状。它适合表现科技、机械、结构和工业等主题，同时也能够营造出现代感和未来感。\na castle,blueprint --q 2 --s 250 --style raw comicbook 漫画书 漫画（Comicbook）艺术风格是一种以漫画书、平面小说和图形小说为基础的视觉艺术形式，通常包括鲜明的色彩、强烈的线条和夸张的动作表现。漫画艺术风格可以分为多种流派，如传统的美国漫画、日本漫画（Manga）、欧洲漫画（Bandes dessinées）等。\na castle,comicbook --q 2 --s 250 --style raw cartoon 卡通 卡通（Cartoon）艺术风格是一种以幽默、夸张和卡通化的手法表现事物的视觉艺术形式，其特点是简单明了的线条和图案、夸张的表情和动作，以及鲜艳的颜色。这种风格广泛应用于动画片、漫画书、平面设计、广告和产品包装等领域中。卡通艺术风格可以分为多个子类别，如动物卡通、人物卡通、科技卡通等，每种子类别都有其独特的表现方式和文化内涵。\na castle,cartoon --q 2 --s 250 --style raw caribbeen 加勒比 加勒比（Caribbean）艺术风格是指源于加勒比海地区的当代视觉艺术形式，具有明显的民族色彩和文化特征。这种艺术风格通常包括充满活力和色彩感的图案和形状，以及对生活、自然和人物等元素的传统表现方式。它反映了加勒比地区丰富多彩的历史和文化遗产，融合了不同种族和文化之间的交流和互动。\na castle,caribbeen --q 2 --s 250 --style raw celestial 天人般 Celestial艺术风格是一种以天体、星空、宇宙等为主题的艺术风格，通常使用深色背景和夜空中的星星和行星等元素来表现宇宙的神秘感，强调天体之间的联系和相互作用。视觉上通常具有柔和的色彩和流畅的线条，并且常被用于装饰家居或作为科学教育展示的辅助材料。这种风格向人们传达出一种富有启迪性和浪漫主义色彩的情感。\na castle,celestial --q 2 --s 250 --style raw cellulose 纤维素 Cellulose是一种由许多葡萄糖分子组成的生物聚合物，在自然界中广泛存在于植物细胞壁中。它具有很强的力学强度和化学稳定性，可用于制造各种实用产品。在艺术领域中，也可以将Cellulose塑造成各种形状进行装饰或展示，或者作为创作绘画和雕塑等作品的媒介。\na castle,cellulose --q 2 --s 250 --style raw ","permalink":"https://edinik.com/posts/tech/midjourney-styles-05/","summary":"arabic 阿拉伯 Arabic艺术风格是指源自阿拉伯文化传统的艺术表现形式，包括建筑、绘画、书法、陶瓷等多种艺术形式。这种艺术风格以其复杂、华丽的几何图案和线条为特征，在使用色彩方面通常以鲜艳的色彩为主。Arabic艺术风格在设计中注重对称美学，讲究每一个元素的平衡和协调性，并在表达中融入","title":"midjourney | styles 05"},{"content":"16-Bit 16位图像是一种数字图像格式，它每个像素的色彩值可以使用16位二进制数字来表示。相比于8位图像，它可以呈现更加精细和逼真的图像效果，但需要更多的储存空间和处理能力，并且不是所有的软件和设备都支持这种格式。\na castle,16-Bit --style raw --q 2 --s 250 8-Bit 8位图像是一种使用8个bits来存储每个像素的颜色信息的图像，可以表示256种不同的颜色。它通常用于简单的图标、按钮、线框图等。由于其文件大小小且对计算机硬件要求较低，因此在计算机操作系统、网络页面设计和游戏开发等领域被广泛应用。\na castle,8-Bit --style raw --q 2 --s 250 1800s 19世纪的绘画风格多种多样，包括浪漫主义、实用主义、印象主义和色彩派。这些不同的风格侧重于表现个人感受、真实场景、瞬间感官印象和色彩构图等方面。\na castle,1800s --style raw --q 2 --s 250 1980s 20世纪80年代的绘画风格很多，其中包括新表现主义、后现代主义、抽象表现主义和图像写实主义。\na castle,1980s --style raw --q 2 --s 250 Amber 琥珀色调 琥珀色调是一种类似于琥珀宝石的暖色调，通常为黄褐色到橙褐色之间。它在艺术、设计和家居装饰中经常被使用，传达出古朴、安静和优雅的感觉，同时也具有温度和活力。\na castle,amber --style raw --q 2 --s 250 Ancient 古代 古代绘画风格因文化、时期和地区而异。古埃及绘画使用平面色彩和纹样，描绘神话和法老的生活；古希腊绘画强调对比和透视，描绘历史场面和祭祀场景；古罗马绘画更注重实用和表现力，通常描绘人物和装饰图案等；中国古代绘画则包括了许多流派和风格，注重笔墨和意境的传达。\ncastle ancient --style raw --q 2 --s 250 Anime 日式动画 日式动画是起源于日本的动画作品，具有独特的艺术风格和视觉效果。它注重角色设计、背景描绘和情感描写等方面，强调细节和表现手法。\na castle,anime --style raw --q 2 --s 250 ","permalink":"https://edinik.com/posts/tech/midjourney-styles-04/","summary":"16-Bit 16位图像是一种数字图像格式，它每个像素的色彩值可以使用16位二进制数字来表示。相比于8位图像，它可以呈现更加精细和逼真的图像效果，但需要更多的储存空间和处理能力，并且不是所有的软件和设备都支持这种格式。 a castle,16-Bit --style raw --q 2 --s 250 8-Bit 8位图像是一种使用8个bits来存储每个像素的颜色信息的","title":"midjourney | styles 04"},{"content":"op art 欧普艺术 欧普艺术是一种充满视觉效果的艺术形式，它在20世纪60年代达到巅峰。这种艺术形式强调视觉效应和幻觉，并将对比、色彩和几何图案运用于作品中。欧普艺术作品常常给人眼花缭乱、扭曲变形、错觉迷离的感觉，因此在欣赏这类作品时需要较强的视觉感知能力和集中注意力的能力。Berkeley艺术家Bridget Riley被认为是Op艺术的代表人物之一。\na rabbit sitting inside of a black and white striped swirling pattern, in the style of illusory hyperrealism, , varying perspectives, crosshatched shading, animated gifs, mechanical realism, trompe-l\u0026#39;oeil folds,op art --q 2 --s 250 --v 5.1 Japanese ink 日本墨水 日本水墨画是一种使用黑色水墨和毛笔，强调意境和气韵的艺术形式。它通常表现自然景观、花鸟虫鱼和人物肖像，通过线条、阴影和空白等元素来表达物体的形状和质感，并追求极致简洁和灵动自然的画面效果。\nthe picture of a tiger in watercolor, in the style of dark beige and white, serene ink paintings, cryptid academia, mote kei, misty atmosphere, wilderness, decorative paintings,Japanese ink--ar 39:37 --q 2 --s 250 --v 5.1 pastel drawing 粉笔画 粉笔画是一种使用粉彩或粉笔在纸上绘制的艺术形式，它具有柔和、平滑和丰富的颜色效果，通常用于描绘肖像、风景和静物。艺术家可以通过层层叠加不同颜色的粉末来创造出逼真而柔和的色彩效果，并使用不同工具增强画面的质感和层次感。\ncat pastel drawing --q 2 --s 250 --v 5.1 dripping art 滴漆艺术 滴漆艺术是一种由杰克逊·波洛克创造的抽象表现主义绘画技法，它特点是将颜料滴在铺在地面上的画布上，并通过手臂、身体和重心的运动使颜料流淌形成独特的图案和纹理。滴漆艺术强调过程而非结果，旨在表达出宇宙力量、生命能量和精神冲动等概念，具有创新性和表现力。\nbunny with colorful paint splatter on black, in the style of fluid color combinations, graffiti-inspired animals, bold colours, rtx, lith printing, dark gray and cyan, soft watercolours,dripping art --ar 38:37 --q 2 --s 250 --v 5.1 tattoo art 纹身艺术 纹身艺术是一种在人体上刺入染料、色素或其他材料制作图案和文字的艺术形式。现代纹身艺术家使用电动纹身机或手工纹身针将颜料注入人体表层，创造出各种图案、符号、花卉、动物等主题。纹身艺术具有个性化、文化传承和艺术性等特点，并成为了一种流行的文化和艺术形式。\na gray bunny on the arm with flowers, in the style of vibrant geometry, dappled, synchromism, dark amber and cyan, naturalist, meticulous technique ,tattoo art--ar 42:37 --q 2 --s 250 --v 5.1 one-line drawing 单线图 单线图是一种使用单线不停歇地绘制出完整形状的艺术形式。它强调简洁、纯粹和极致的表现方式，需要艺术家高度的专注力和细致的操作。单线图具有独特的艺术魅力和视觉效果，能够让观众感受到线条和形状的流畅和优美，适合喜欢抽象艺术和线条美感的艺术爱好者尝试制作。\nSiberian Husky one-line drawing --q 2 --s 250 --v 5.1 oil painting 油画 油画是一种使用颜料和稀释剂在画布或其他支撑材料上绘制的艺术形式，能够表现出细腻、光滑和丰富的色彩效果，通常用于描绘人物、风景、静物等主题。制作油画需要混合颜料和稀释剂，并采用多层涂抹的方式，以此创造出具有深度和层次感的画面效果。油画具有广泛影响力和历史意义，是许多艺术家和收藏家重要的选择。\ngarden with many flowers,oil painting --q 2 --s 250 --v 5.1 film style 电影风格 电影风格是指在电影制作中运用的特定创作手法、语言和技巧，以此来表现出独特的影像效果和文化氛围。不同的电影风格通常具有明显区别，可以使观众更好地理解电影的主题和情感，增强了电影的艺术性和视觉冲击力。每种电影风格都有其独特的表达方式，对于电影制片人、导演、编剧、摄影师和表演者等创作人员来说，选择适合自己电影题材的风格并深入挖掘其内涵和表现形式是非常关键的。随着数字技术和网络传播的普及，新型的电影风格也在不断涌现。\nthe story of a dog ,film style --q 2 --s 250 --v 5.1 ","permalink":"https://edinik.com/posts/tech/midjourney-styles-03/","summary":"op art 欧普艺术 欧普艺术是一种充满视觉效果的艺术形式，它在20世纪60年代达到巅峰。这种艺术形式强调视觉效应和幻觉，并将对比、色彩和几何图案运用于作品中。欧普艺术作品常常给人眼花缭乱、扭曲变形、错觉迷离的感觉，因此在欣赏这类作品时需要较强的视觉感知能力和集中注意力的能力。Berkel","title":"midjourney | styles 03"},{"content":"pixel art 像素艺术 像素艺术是一种数字艺术形式，使用小块的色彩单元（像素）来创建图像，需要在非常小的空间内创造出足够的细节和深度。它通过色彩、对比度、纹理和形状等元素来创造出丰富的视觉效果。\nan enchanted village in an autumn setting, in the style of pixel perfect, poolcore, traditional craftsmanship, softly organic, hazy, dreamlike quality, stage-like environments, hikecore, pixel art --ar 19:16 --q 2 --s 250 --v 5.1 watercolour 水彩 水彩画是一种使用水溶性颜料在纸上进行绘制的绘画技术，具有色彩柔和、渐变自然、独特的表现力和艺术感染力。它通过水彩颜料在纸上的流动和渗透来创造出独特的纹理和阴影效果，需要掌握较高的技巧和经验。\na watercolor painting of a pathway to a garden, in the style of dark emerald and orange, soft edges and atmospheric effects, ian howorth, intricate, delicate flower and garden paintings, dramatic shading, joyful celebration of nature, watercolour--ar 25:23 --q 2 --s 250 --v 5.1 dark fantasy 黑暗幻想 黑暗幻想是一种带有恐怖和惊悚氛围的奇幻作品，通常包含黑暗、邪恶、超自然现象、死亡和破坏等元素。这类故事探索人性的阴暗面，与传统的奇幻文学不同，更加复杂和深刻。\nebon forest gloom night scene in woodland, in the style of intricate, delicate flower and garden paintings, streetscape, sketchfab, blurred, pont-aven school, haunting houses, oil paintings, dark fantasy --ar 39:34 --q 2 --s 250 --v 5.1 ukiyo-e art 浮世绘艺术 浮世绘是一种源于日本的传统版画艺术，通过木版或铜版印刷技术制作，具有鲜艳明亮的色彩和扁平的构图，常表现日本社会的风俗、名胜、历史、传说以及女性等。它们具有浓郁的民间文化气息，在世界范围内备受推崇，对许多艺术运动产生了深远影响，也为后来的文学、音乐、电影等领域提供了灵感和素材。\nfemales sitting on rocks as if water flows by, in the style of japenese renaissance, dark cyan and light beige, tapestry-like paintings, colorful gardens, microfilm, trompe-l\u0026#39;œil illusionistic detail, sōsaku hanga ,ukiyo-e art--ar 13:12 --q 2 --s 250 --v 5.1 paper quilling 绗缝纸 是一种通过将色彩纸条卷曲并粘贴在一起来创造出各种形状和图案的手工艺术。它可以用于制作卡片、花束、挂饰等装饰物品，源于16世纪欧洲，需要耐心和技巧，提供了无限的创意空间，使得每个人都可以用自己的方式来表达自己的想法和风格。\na flower wreath surrounded by fibers, in the style of museum gallery dioramas, harmonizing colors, jane newland, enchanting, swirling vortexes, colorful gardens, intricate embellishments,paper quilling --ar 37:35 --q 2 --s 250 --v 5.1 paper cut craft 剪纸工艺 是一种源于中国的传统手工艺术，通过用剪刀或刻刀将色彩纸张剪出各种形状和图案。它可以用于装饰窗户、墙壁、灯笼等。剪纸艺术融合了中国传统文化与美学理念，在表现主题、构图、色彩等方面都有独特的风格和特点。需要耐心和细致的操作，提供了无限的创意空间，使得每个人都可以用自己的方式来表达自己的想法和风格。\na garden cut out paper art of a green garden with lots of flowers, in the style of dark orange and aquamarine, maquette, pretty, enchanting, paper sculptures, elaborate,paper cut craft --ar 10:9 --q 2 --s 250 --v 5.1 iridescent 虹彩 是一种光线照射下呈现多种颜色的效果，可以通过绘画、摄影和珠宝设计等多种艺术形式表达。在这些领域中，艺术家会使用不同的技巧来展现 iridescent 的美丽和魅力。\na painting with a forest scene and flowers, in the style of blurred, dreamlike atmosphere, intricate, delicate flower and garden paintings, saturated pigment pools, yashica mat-124g, impressionist gardens, dramatic splendor, light emerald and magenta ,iridescent--ar 52:49 --q 2 --s 250 --v 5.1 patchwork collage 拼布拼贴画 是一种将多种不同材料、图案或颜色组合在一起的拼贴艺术，可以是二维或三维的作品。这种表现形式适合于喜欢创意和自由表达的人，能够创造出丰富多彩的情感和想法。\na painting of different flower patterns, in the style of rectangular fields, rustic americana, layered images, bold patterned quilts, tranquil gardenscapes, lightbox, grungy patchwork,patchwork collage --ar 53:50 --q 2 --s 250 --v 5.1 ","permalink":"https://edinik.com/posts/tech/midjourney-styles-02/","summary":"pixel art 像素艺术 像素艺术是一种数字艺术形式，使用小块的色彩单元（像素）来创建图像，需要在非常小的空间内创造出足够的细节和深度。它通过色彩、对比度、纹理和形状等元素来创造出丰富的视觉效果。 an enchanted village in an autumn setting, in the style of pixel perfect, poolcore, traditional craftsmanship, softly organic, hazy, dreamlike quality, stage-like environments, hikecore, pixel art --ar 19:16 --q 2 --s 250 --v 5.1 watercolour 水彩 水彩画是一种使用水溶性颜","title":"midjourney | styles 02"},{"content":"整体风格是画面表现的主要特征。可以在prompt的主体描述之后，加入相关关键词来指定。同时，整体风格也可以和后续的艺术家交叉使用，来达到混合效果。\nisometric anime 等距动画 等距动画使用等距投影技术，使得动画场景中的物体保持真实比例和尺寸关系。这种技术适用于建筑、城市规划、商品设计等领域的可视化展示。制作等距动画需要使用三维建模软件和动画制作软件，确保物体尺寸关系始终不变，最后输出为所需格式。\nOne cute Chinese ancient buildings with a pool isometric anime analytic drawing 分析性绘图 解析绘画是通过观察和分析物体的结构、形状、大小、位置等因素进行绘画的技法。艺术家使用几何形状和比例关系来捕捉物体特征，营造出具有深度和逼真感的图像。解析绘画适用于素描、铅笔画和炭笔画等绘画形式，不仅提高了绘画技巧，也增强了对三维世界的感知能力。\nOne Chevrolet Corvette Stingray analytic drawing coloring book 着色书 涂色书是一本可以涂色的线描图书籍，适合儿童和成年人放松和发挥创意。主题多样，包括动物、自然、幻想和抽象设计等，并有些还包含教育元素。可在实体书店、在线零售商或下载为数字文件中购买。\nbeautiful amazing garden with various flowers coloring book infographic drawing 信息图画 信息图表指的是一种用图形来清晰简洁地表达数据和信息的视觉表现形式。要制作信息图表，可以使用诸如Adobe Illustrator、Canva或Microsoft PowerPoint等平面设计软件，这些软件提供了创建信息图表所需的工具和功能。\nCreate an infographic drawing that showcases the evolution of car makes over time. The infographic should include a timeline that spans from the early days of the automobile industry to modern times, highlighting key moments such as the invention of the assembly line, advances in engine technology, and the emergence of electric cars. Use bold and colorful graphics to represent each car make, and include information on their unique features, such as horsepower, fuel efficiency, and safety ratings. Consider incorporating interesting tidbits about car history, such as famous car models or iconic movie cars, to make the infographic both educational and entertaining. Imagine that you are creating this infographic for an automobile magazine in order to inspire readers\u0026#39; passion for cars and their rich history double exposure 双重曝光 双重曝光是一种摄影技巧，在同一张底片上拍摄两次不同的图像，产生视觉上的混合效果。在数字摄影时代，可以使用Photoshop等软件实现。这种方法可以创造出更具表现力的作品。\none picture is a head of a beautiful girl,another is forest,background is white,synthesize more naturally,more artistic. double exposure diagrammatic drawing 图示性绘图 图示性绘图是一种通过图表、符号和其他图形元素来传达信息或概念的视觉表示方法。它通常用于工程学、建筑学、数学和科学等领域，以提供对复杂思想或结构的清晰和简明的表达。\nbedroom diagrammatic drawing 2D illustration 二维插图 二维插图是指使用二维图形软件或传统手绘技巧创建的平面艺术作品，其目的是通过色彩、线条和形状等元素来传达信息、概念或情感。2D插画通常在广告、出版物、游戏、动画和网站设计等领域中被广泛使用，可以用于制作卡通、字符设计、平面设计等等。\nA circular garden adorned with a bountiful array of fruits and fresh flowers, complemented by a gently swaying swing and tranquil pond teeming with fluttering butterflies, all interconnected by a winding path of elegant flagstones. 2D illustration diagrammatic portrait 图解式画像 图解式画像是一种结合传统肖像绘画技巧和现代图形设计方法的艺术形式，使用线条、几何图形和文本标签等元素来表现被描绘人物的特征和个性，并旨在传达更为详细和复杂的信息。\nEinstein diagrammatic portrait ","permalink":"https://edinik.com/posts/tech/midjourney-styles-01/","summary":"整体风格是画面表现的主要特征。可以在prompt的主体描述之后，加入相关关键词来指定。同时，整体风格也可以和后续的艺术家交叉使用，来达到混合效果。 isometric anime 等距动画 等距动画使用等距投影技术，使得动画场景中的物体保持真实比例和尺寸关系。这种技术适用于建筑、城市规划、商品设计等领域的可视化","title":"midjourney | styles 01"},{"content":" 拍摄时间：2023/04/30\n流苏 绣球 蒲公英 金银木 二月兰 重瓣棣棠花 荚迷花 黄鹌菜 ","permalink":"https://edinik.com/posts/life/beijing-aosen-2023-chionanthus-hydrangea/","summary":"拍摄时间：2023/04/30 流苏 绣球 蒲公英 金银木 二月兰 重瓣棣棠花 荚迷花 黄鹌菜","title":"摄影集 | 奥森公园 流苏 绣球"},{"content":"参数详解 1、指令\n--aspect --ar 2、默认值\n宽:高 = 1:1 3、输入验证\n只能输入正整数 4、不同的模型对应不同的横纵比\nVersion 5 Version 4c (default) Version 4a or 4b Version 3 Test / Testp niji Ratios any* 1:2 to 2:1 Only: 1:1, 2:3 or 3:2 5:2 to2:5 3:2 to 2:3 1:2 to 2:1 5、注意\n横纵比超过2:1为实验性功能，可能会出现不可预测的结果 6、常见的横纵比\n--aspect 1:1 默认横纵比。 --aspect 5:4 常见的画框和印刷比例。 --aspect 3:2 常见的摄影印刷比例。 --aspect 7:4 高清电视屏幕和智能手机屏幕比例。 参数示例 --ar 2:3 --ar 16:9 --ar 4:3 --ar 1:1 ","permalink":"https://edinik.com/posts/tech/midjourney_aspect_ratios/","summary":"参数详解 1、指令 --aspect --ar 2、默认值 宽:高 = 1:1 3、输入验证 只能输入正整数 4、不同的模型对应不同的横纵比 Version 5 Version 4c (default) Version 4a or 4b Version 3 Test / Testp niji Ratios any* 1:2 to 2:1 Only: 1:1, 2:3 or 3:2 5:2 to2:5 3:2 to 2:3 1:2 to 2:1 5、注意 横纵比超过2:1为实验性功能，可能会出现不可预测的结果 6、常见的横纵比 --aspect 1:1 默认横纵比。 --aspect 5:4 常见的画框和印刷比例","title":"midjourney | aspect ratios"},{"content":"Imagine命令 基本格式：/imagine + 文字提示 高级格式：/imagine + 图片提示 + 文字提示 + 参数 1、图片提示\n格式要求：jpg、png、gif 2、提示词最低要求：两张图片，或者一张图片+提示词\n参数 Image Weight (图像权重) --iw\n越高的图像权重意味着图像提示对生成图像的影响越大。\n不同的版本有不同的图像权重范围：\nVersion 5 Version 4 Version 3 Test / Testp niji Stylize default 1 NA .25 NA NA Stylize Range .5–2 NA -10000–10000 NA NA 提示例子：/imagine https://s.mj.run/AtXbPf5hENw lamp --iw .5 --v 5 --q 2\nImage Prompt \u0026ndash;iw .5 \u0026ndash;iw .75 \u0026ndash;iw 1 \u0026ndash;iw 1.25 \u0026ndash;iw 1.5 \u0026ndash;iw 1.75 \u0026ndash;iw 2 ","permalink":"https://edinik.com/posts/tech/midjourney_image_weight/","summary":"Imagine命令 基本格式：/imagine + 文字提示 高级格式：/imagine + 图片提示 + 文字提示 + 参数 1、图片提示 格式要求：jpg、png、gif 2、提示词最低要求：两张图片，或者一张图片+提示词 参数 Image Weight (图像权重) --iw 越高的图像权重意味着图像提示对生成图像的影响越大。 不同的版","title":"midjourney | image weight"},{"content":" 兰空图床(Lsky Pro)官方项目地址 兰空图床(Lsky Pro)第三方Docker项目地址 官方Wiki\nDocker容器构建命令 docker run -d \\ --name lsky-pro \\ --restart unless-stopped \\ -p 8089:8089 \\ -v $PWD/lsky/web:/var/www/html \\ -e WEB_PORT=8089 \\ halcyonazure/lsky-pro-docker:latest 反代/套CDN后无法加载静态文件(css, js)，安装时点击无反应 进入root/lsky/web目录，编辑 .env 文件，追加一行： ASSET_URL=https://你的域名 但是接口域名还是 http 的，所以编辑app/Providers/AppServiceProvider.php文件 public function boot() { // 是否需要生成 env 文件 if (! file_exists(base_path(\u0026#39;.env\u0026#39;))) { file_put_contents(base_path(\u0026#39;.env\u0026#39;), file_get_contents(base_path(\u0026#39;.env.example\u0026#39;))); // 生成 key Artisan::call(\u0026#39;key:generate\u0026#39;); } // 如果已经安装程序，初始化一些配置 if (file_exists(base_path(\u0026#39;installed.lock\u0026#39;))) { // 覆盖默认配置 Config::set(\u0026#39;app.name\u0026#39;, Utils::config(ConfigKey::AppName)); Config::set(\u0026#39;mail\u0026#39;, array_merge(\\config(\u0026#39;mail\u0026#39;), Utils::config(ConfigKey::Mail)-\u0026gt;toArray())); View::composer(\u0026#39;*\u0026#39;, function (\\Illuminate\\View\\View $view) { /** @var Group $group */ $group = Auth::check() ? Auth::user()-\u0026gt;group : Group::query()-\u0026gt;where(\u0026#39;is_guest\u0026#39;, true)-\u0026gt;first(); $view-\u0026gt;with(\u0026#39;_group\u0026#39;, $group); }); } } 在第三行追加一行 \\Illuminate\\Support\\Facades\\URL::forceScheme(\u0026#39;https\u0026#39;); PicGo插件配置 picgo-plugin-lankong插件项目地址\n获取Token curl -X POST -F \u0026#34;email=your_email@address\u0026#34; -F \u0026#34;password=your_passwd\u0026#34; https://your.domain/api/v1/tokens ","permalink":"https://edinik.com/posts/tech/build-lsky-image-hosting-platform/","summary":"兰空图床(Lsky Pro)官方项目地址 兰空图床(Lsky Pro)第三方Docker项目地址 官方Wiki Docker容器构建命令 docker run -d \\ --name lsky-pro \\ --restart unless-stopped \\ -p 8089:8089 \\ -v $PWD/lsky/web:/var/www/html \\ -e WEB_PORT=8089 \\ halcyonazure/lsky-pro-docker:latest 反代/套CDN后无法加载静态文件(css, js)，安装时点击无反应 进入root/lsky/web目录，编辑 .env 文件，","title":"图床 | lsky图床平台搭建"},{"content":" 维斯特洛（Westeros） 也被称为日落国度（the Sunset Kingdoms），坐落於已知世界的最西端，狭长的维斯特洛大陆由北部的极地冰盖起向南延绵约3,000英里。绝境长城是一座巍峨挺立的不可逾越之物，横跨300英里，将最北的塞外地区与七大王国相互分离。一个统一的政治实体领导着南方的广阔土地，并形成九块相互联系又相互割据的区域。\n双语地图 彩板楷体地图 区域 塞外 塞外（Beyond the Wall）是对维斯特洛最北方，由长城向北的区域的泛称。\n北境 北境（The North）是维斯特洛的一部分，在征服战争发生前曾是独立的王国，目前是维斯特洛的七大王国中面积最大的地区，北至守夜人的新赠地，南至颈泽。\n厄斯索斯（Essos） 是这个世界上已知的四块大陆中最大的一块。它位于维斯特洛以东，索斯罗斯以北，从颤抖海延伸至夏日之海，从狭海延伸到玉海周围的陆地。人们更多地使用狭海对岸、“东方大陆”或者“东方”来称呼它，经常也用“自由贸易城邦”或“多斯拉克海”等组成区域的名字来指代它。\n","permalink":"https://edinik.com/posts/read/game-of-thrones-maps/","summary":"维斯特洛（Westeros） 也被称为日落国度（the Sunset Kingdoms），坐落於已知世界的最西端，狭长的维斯特洛大陆由北部的极地冰盖起向南延绵约3,000英里。绝境长城是一座巍峨挺立的不可逾越之物，横跨300英里，将最北的塞外地区与七大王国相互分离。一个统一的政治实体领导着南方的","title":"权力的游戏 | 地图"},{"content":"史塔克家族 英文 House Stark of Winterfell 头衔 北境之王、北境守护 封地 临冬城、卡林湾 家徽 白色雪原上银灰色的一只冰原奔狼 箴言 凛冬将至 mindmap root((艾德·史塔克)) 妻子：凯特琳·徒利 弟弟：班扬 妹妹：莱安娜 哥哥：布兰登 长子：罗柏 妻子：简妮·维斯特林 长女：珊莎 冰原狼：淑女 未婚夫：乔佛里 丈夫：提利昂·兰尼斯特 次女：艾莉亚 次子：布兰 冰原狼：夏天 幼子：瑞肯 私生子：琼恩·雪诺 冰原狼：白灵 拜拉席恩家族 英文 House Baratheon of Storm\u0026rsquo;s End 头衔 风息堡公爵、风暴地守护 封地 风暴地 家徽 金底上黑色的宝冠雄鹿 箴言 怒火燎原 mindmap root((劳勃·拜拉席恩)) 未婚妻：莱安娜·史塔克 妻子：瑟曦·兰尼斯特 弟弟：詹姆·兰尼斯特 长子：乔佛里 长女：弥赛菈 幼子：托曼 长弟：史坦尼斯 幼弟：蓝礼 私生女：米娅·石东 私生女：钟儿 私生子：詹德利 私生子：艾德瑞克·风暴 私生女：芭拉 徒利家族 英文 House Tully of the Riverrun 头衔 奔流城公爵、三叉戟河总督 封地 无（前为奔流城） 家徽 腾跃于红蓝条纹底上的银色鳟鱼 箴言 家族，责任，荣誉 mindmap root((霍斯特·徒利)) 妻子：米妮莎·河安 长女：凯特琳·徒利 丈夫：艾德·史塔克 次女：莱莎·徒利 长子：艾德慕·徒利 妻子：萝丝琳·佛雷 弟弟：布林登·徒利 坦格利安家族 英文 House Targaryen 头衔 七大王国国王、全境守护、龙石岛亲王、盛夏厅亲王 封地 无（前为红堡、龙石岛、盛夏厅） 家徽 黑色底色上的三头红龙 箴言 血火同源 mindmap root((疯王 伊里斯二世)) 妻子：雷拉 长子：雷加 妻子：伊莉亚·马泰尔 儿子：小格里芬 伊耿 女儿：雷妮丝 次子：韦赛里斯 女儿：丹妮莉丝 丈夫：卓戈·卡奥 儿子：雷戈 大龙：卓耿（Drogon） 二龙：雷哥（Rhaegal） 三龙：韦赛利昂（Viserion） 丈夫：西茨达拉·佐·洛拉克 叔公：伊蒙 波顿家族 英文 House Bolton 头衔 北境守护，恐怖堡公爵 封地 恐怖堡 家徽 粉底上的红色剥皮人 箴言 吾刃尚锋 mindmap root((卢斯)) 第二任妻子：蓓珊妮·莱斯威尔 第三任妻子：瓦妲·佛雷 长子：多米利克 私生子：拉姆斯 第一任妻子：唐娜拉·曼德勒 第二任妻子：珍妮·普尔（假冒艾莉亚·史塔克） 兰尼斯特家族 英文 House Lannister 头衔 凯岩王、凯岩城公爵、兰尼斯港之盾、西境守护、西境统领 封地 凯岩城 家徽 绯红色土地上金色的怒吼雄狮 箴言 听我怒吼 mindmap root((泰温·兰尼斯特)) 妻子：乔安娜·兰尼斯特 长弟：史戴佛 长子：达冯 女儿：莎琳娜 女儿：蜜莉儿 长女：瑟曦 丈夫：劳勃·拜拉席恩 长子：弑君者 詹姆 次子：小恶魔 提利昂 妻子：珊莎·史塔克 长弟：凯冯 妻子：多娜·史威佛 长子：蓝赛尔 妻子：阿蕊丽·佛雷 次子：威廉 三子：马丁 幼女：珍娜 妹妹：吉娜 丈夫：艾蒙·佛雷 二弟：提盖特 妻子：达丽莎·马尔布兰 独子：提瑞克 妻子：艾弥珊德·哈佛 三弟：吉利安 私生女：杰依·希山 ","permalink":"https://edinik.com/posts/read/game-of-thrones-character-relationship/","summary":"史塔克家族 英文 House Stark of Winterfell 头衔 北境之王、北境守护 封地 临冬城、卡林湾 家徽 白色雪原上银灰色的一只冰原奔狼 箴言 凛冬将至 mindmap root((艾德·史塔克)) 妻子：凯特琳·徒利 弟弟：班扬 妹妹：莱安娜 哥哥：布兰登 长子：罗柏 妻子：简妮·维斯特林 长女：珊莎 冰原狼：淑女 未婚夫：乔佛里 丈夫：提利昂·兰尼斯特 次","title":"权力的游戏 | 人物关系图"},{"content":" 拍摄时间：2023/04/15\n简介 棣棠花是蔷薇科蔷薇亚科棣棠花属唯一的植物，是一种灌木。其花色独特，呈现出鲜艳的黄色。每朵花有5片花瓣，分为单瓣和重瓣两种类型，其中重瓣类型比较少见。\n单瓣棣棠花 ","permalink":"https://edinik.com/posts/life/taoranting-kerria-japonica/","summary":"拍摄时间：2023/04/15 简介 棣棠花是蔷薇科蔷薇亚科棣棠花属唯一的植物，是一种灌木。其花色独特，呈现出鲜艳的黄色。每朵花有5片花瓣，分为单瓣和重瓣两种类型，其中重瓣类型比较少见。 单瓣棣棠花","title":"摄影集 | 陶然亭 棣棠花"},{"content":" 拍摄时间：2023/04/15\n郁金香 Charming Beauty Tom Pouce purple jacket Marilyn 牡丹 风信子 葡萄风信子 银杏 ","permalink":"https://edinik.com/posts/life/beijing-zhongshan-park-2023-tulips-peonies/","summary":"拍摄时间：2023/04/15 郁金香 Charming Beauty Tom Pouce purple jacket Marilyn 牡丹 风信子 葡萄风信子 银杏","title":"摄影集 | 中山公园 郁金香 牡丹"},{"content":" 英文名：Tulipa gesneriana /tuːlɪpə ɡɛsˈnɛriənə/\n目 科 属 种 百合目 百合科 郁金香属 郁金香 Single Tulips 单瓣郁金香 1、Christmas Marvel 圣诞奇迹 2、Prince of Austria 奥地利王子 3、Diana 戴安娜 4、Ruby Red 红宝石 5、General De Wet 德韦特将军 6、Dreamland 梦幻之地 7、Prins Carnaval 狂欢节王子 8、Red Georgette 红色乔其纱 9、Christmas Pearl 圣诞珍珠 10、Purple Prince 紫色王子 Double Tulips 重瓣组 型似芍药，花朵可达25cm\n1、Abba 阿巴乐队 2、Montreux 蒙特勒 3、Black Hero 黑色英雄 4、Ice Cream 冰淇淋 5、Verona 维罗纳 6、Monte Carlo 蒙特卡洛 7、Peach Blossom Fosteriana Tulips 福斯特组 碗型大花瓣,复花性很好\n1、Orange Emperor 橙色皇帝 2、Exotic Emperor 异国情调 Kaufmanniana Tulips 考夫曼组 星星杯型，身材小巧\n1、Jeantine 2、Giuseppe Verdi 朱塞佩·威尔第 Darwin Hybrid 达尔文组 高大强壮，连续多年复花\n1、Parade 巡游 2、Pink impression 3、Golden Apeldoorn 阿珀尔登金 Greigii Tulips 格里吉组 单瓣碗型，叶子有条纹\n1、Calypso 卡吕普索 2、Winnipeg 温尼伯 Fringed Tulips 花边组 花瓣有流苏花边，花期、身高各异\n1、Blue Heron 蓝鹭 2、Huis Ten Bosch 豪斯登堡 3、Brest 布雷斯特 Triumph Tulips 凯旋组 品种最多，中等身材，花茎坚挺\n1、Oscar 奥斯卡 2、Mistress Mystic 3、White Dream 白色梦境 4、Shirley 雪莉 Parrot Tulips 鹦鹉 毛边大花瓣，晚花\n1、Rococo 洛可可 2、Flaming 火焰 3、Super 4、Apricot 5、Green wave 6、Texas Flame Lily-Flowered 百合花组 高脚杯型，花茎纤细\n1、Aladdin 2、West Point 3、Maytime 4、White Triumphator 5、Ballade 6、Marilyn Viridiflora Tulips 绿花组 花瓣中间带绿色条纹\n1、Golden Artist 2、China town 3、Sprint Green 4、Florosa 5、Artist 参考资料 [1] Tulip - Wikipedia\n","permalink":"https://edinik.com/posts/life/introduction-to-tulips/","summary":"英文名：Tulipa gesneriana /tuːlɪpə ɡɛsˈnɛriənə/ 目 科 属 种 百合目 百合科 郁金香属 郁金香 Single Tulips 单瓣郁金香 1、Christmas Marvel 圣诞奇迹 2、Prince of Austria 奥地利王子 3、Diana 戴安娜 4、Ruby Red 红宝石 5、General De Wet 德韦特将军 6、Dreamland 梦幻之地 7、P","title":"鲜花百科 | 郁金香"},{"content":"庭院深深深几许，杨柳堆烟，帘幕无重数。玉勒雕鞍游冶处，楼高不见章台路。 雨横风狂三月暮，门掩黄昏，无计留春住。泪眼问花花不语，乱红飞过秋千去。\n赏析：\n首先对女主人公的居处作了精心的安排。读着“杨柳堆烟，帘幕无重数”，仿佛先是看到一丛丛杨柳从眼前移过，随着这一丛丛杨柳过去，镜头摇向庭院，摇向帘幕。这帘幕不是一重，而是过了一重又是一重，令人感到这座庭院简直是无比幽深。但是画面并没有切到女主人公所在的地点。先说一句“玉勒琱鞍游冶处”，宕开一笔，把视线引到了她丈夫那里。然后折过笔来写道，“楼高不见章台路”。原来词中女子正独处高楼，她的目光正透过重重帘幕，堆堆柳烟，向丈夫经常游冶的地方凝神远望。\n雨横风狂，催送着残春，也催送着女主人公的芳年。她想挽留住春天，但风雨无情，留春不住。于是她感到无奈，只好把感情寄托到命运同她一样的花上：“泪眼问花花不语，乱红飞过秋千去”。人儿走马章台，花儿飞过秋千，有情之人，无情之物对她都报以冷漠，可见词中女子的心境。\n","permalink":"https://edinik.com/posts/read/butterflies-in-love-with-flowers-ouyangxiu/","summary":"庭院深深深几许，杨柳堆烟，帘幕无重数。玉勒雕鞍游冶处，楼高不见章台路。 雨横风狂三月暮，门掩黄昏，无计留春住。泪眼问花花不语，乱红飞过秋千去。 赏析： 首先对女主人公的居处作了精心的安排。读着“杨柳堆烟，帘幕无重数”，仿佛先是看到一丛丛杨柳从眼前移过，随着这一丛丛杨柳过去，镜头摇向庭院","title":"人间词话 | 蝶恋花-庭院深深深几许"},{"content":"引言 设计模式是软件设计中常见问题的典型解决方案。它们就像能根据需求进行调整的预制蓝图，可用于解决代码中反复出现的设计问题。\n创建型模式 提供创建对象的机制， 增加已有代码的灵活性和可复用性。\n1、单例模式 英文表述：Singleton\n能够保证一个类只有一个实例，并提供一个访问该实例的全局节点。\n2、工厂方法模式 英文表述：Factory Method\n在父类中提供一个创建对象的方法， 允许子类决定实例化对象的类型。\n3、抽象工厂模式 英文表述：Abstract Factory\n能创建一系列相关的对象， 而无需指定其具体类。\n4、建造者模式 英文表述：Builder\n能够分步骤创建复杂对象。允许使用相同的创建代码生成不同类型和形式的对象。\n5、原型模式 英文表述：Prototype\n能够复制已有对象， 而又无需使代码依赖它们所属的类。\n结构型模式 将对象和类组装成较大的结构， 并同时保持结构的灵活和高效。\n1、适配器模式 英文表述：Adapter\n使接口不兼容的对象能够相互合作。\n2、桥接模式 英文表述：Bridge\n可将一个大类或一系列紧密相关的类拆分为抽象和实现两个独立的层次结构， 从而能在开发时分别使用。\n3、组合模式 英文表述：Composite\n允许将对象组合成树形结构， 并且能像使用独立对象一样使用它们。\n4、装饰模式 英文表述：Decorator\n允许将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。\n5、外观模式 英文表述：Facade\n为程序库、 框架或其他复杂类提供一个简单的接口。\n6、享元模式 英文表述：Flyweight\n摒弃了在每个对象中保存所有数据的方式，通过共享多个对象所共有的相同状态，能在有限的内存容量中载入更多对象。\n7、代理模式 英文表述：Proxy\n能够提供对象的替代品或其占位符。代理控制着对于原对象的访问，并允许在将请求提交给对象前后进行一些处理。\n行为型模式 负责对象间的高效沟通和职责委派。\n1、职责链模式 英文表述：Chain of Responsibility\n允许将请求沿着处理者链进行发送。收到请求后，每个处理者均可对请求进行处理，或将其传递给链上的下个处理者。\n2、命令模式 英文表述：Command\n可将请求转换为一个包含与请求相关的所有信息的独立对象。该转换能根据不同的请求将方法参数化、延迟请求执行或将其放入队列中，且能实现可撤销操作。\n3、迭代器模式 英文表述：Iterator\n能在不暴露集合底层表现形式（列表、栈和树等）的情况下遍历集合中所有的元素。\n4、中介者模式 英文表述：Mediator\n能减少对象之间混乱无序的依赖关系。会限制对象之间的直接交互，迫使它们通过一个中介者对象进行合作。\n5、备忘录模式 英文表述：Memento\n允许在不暴露对象实现细节的情况下保存和恢复对象之前的状态。\n6、观察者模式 英文表述：Observer\n允许定义一种订阅机制，可在对象事件发生时通知多个 “观察” 该对象的其他对象。\n7、状态模式 英文表述：State\n能在一个对象的内部状态变化时改变其行为，使其看上去就像改变了自身所属的类一样。\n8、策略模式 英文表述：Strategy\n能定义一系列算法，并将每种算法分别放入独立的类中，以使算法的对象能够相互替换。\n9、模板方法模式 英文表述：Template Method\n在超类中定义了一个算法的框架，允许子类在不修改结构的情况下重写算法的特定步骤。\n10、访问者模式 英文表述：Visitor\n能将算法与其所作用的对象隔离开来。\n11、解释器模式 英文表述：Interpreter\n可以将复杂的语言转化为易于处理的数据结构，从而使得语言的解释更加容易。\n参考资料 [1] refactoringguru-design-patterns\n","permalink":"https://edinik.com/posts/tech/design-pattern-introduction/","summary":"引言 设计模式是软件设计中常见问题的典型解决方案。它们就像能根据需求进行调整的预制蓝图，可用于解决代码中反复出现的设计问题。 创建型模式 提供创建对象的机制， 增加已有代码的灵活性和可复用性。 1、单例模式 英文表述：Singleton 能够保证一个类只有一个实例，并提供一个访问该实例的全局节","title":"设计模式 | 简介"},{"content":"解析域名 准备两个域名并在Cloudflare解析域名到服务器IP：\n域名1：开启CDN，用于访问前端页面，如：\u0026ldquo;https://cdn.example.com\u0026rdquo; 域名2：不开启CDN，用于Agent访问后端API，如：\u0026ldquo;https://api.example.com\u0026rdquo; 获取Github的Client ID和Client Secret 登录Github，点击右上角头像，选择Settings， 点击Developer settings，点击New OAuth App 填写注册信息： Application name - 随意填写，如：\u0026ldquo;nezha-monitoring\u0026rdquo; Homepage URL - 填写面板的访问域名，如：\u0026ldquo;https://cdn.example.com\u0026rdquo; Authorization callback URL - 填写回调地址，如：\u0026ldquo;https://cdn.example.com/oauth2/callback\u0026quot; 点击Register application 保存页面中的 Client ID，然后点击 “Generate a new client secret“，创建一个新的 Client Secret，新建的密钥仅会显示一次，请妥善保存 在服务器中安装 Dashboard 在面板服务器中，运行安装脚本：\ncurl -L https://raw.githubusercontent.com/naiba/nezha/master/script/install.sh -o nezha.sh \u0026amp;\u0026amp; chmod +x nezha.sh \u0026amp;\u0026amp; sudo ./nezha.sh 等待Docker安装完毕后，分别输入以下值：\nOAuth提供商：Github Client ID - 之前保存的 Client ID Client Secret - 之前保存的密钥 用户名 - OAuth 提供商中的用户名 站点标题 - 自定义站点标题 访问端口 - 公开访问端口，可自定义，默认 8008 Agent的通信端口 - Agent与Dashboard的通信端口，默认 5555 输入完成后，等待拉取镜像。\n将来如果需要再次运行脚本，可以运行：\n./nezha.sh 开启反向代理和SSL 通过宝塔界面分别对两个域名配置反向代理和SSL，配置完成后，访问面板域名，即可看到面板。\n配置未接入CDN的域名 后台管理 - 设置 - 未接入CDN的面板服务器域名/IP：输入未接入CDN的域名，如：\u0026ldquo;https://api.example.com\u0026rdquo; 安装Agent 首先在管理面板中添加一台服务器 点击新添加的服务器旁，绿色的 Linux 图标按钮，复制一键安装命令 在被控端服务器中运行复制的一键安装命令，等待安装完成后返回到 Dashboard 主页查看服务器是否上线 参考资料 哪吒监控官方文档 ","permalink":"https://edinik.com/posts/tech/nezha-monitoring-server-build/","summary":"解析域名 准备两个域名并在Cloudflare解析域名到服务器IP： 域名1：开启CDN，用于访问前端页面，如：\u0026ldquo;https://cdn.example.com\u0026rdquo; 域名2：不开启CDN，用于Agent访问后端API，如：\u0026ldquo;https://api.ex","title":"哪吒监控 | 服务端搭建"},{"content":"\u003c!DOCTYPE HTML\u003e EP 34\n长球和短球 观察对方发球的第一个落点，如果比较靠近台内的话，就是短球，如果比较靠近台外的话，就是长球。\n旋转的判断 旋转球 在对方球拍接触球时的一刹那，观察发力方向。\n如果接触球时，没有发力摩擦，只是碰过来的，那么就是没有加转的球。 如果接触球时，有发力摩擦，那么就是有加转的球。 侧旋球 三个特征：\n1、看发力方向：\n往上发力，则侧上旋 往下发力，则侧下旋 2、看第一个落点之后的弧线：\n有点往上蹦，弧线比较高的为侧上旋 贴着台面运行，弧线比较低的为侧下旋 3、看到己方台面落点之后的弧线：\n往上蹦的为侧上旋 往下走的为侧下旋 策略 1、上策：\n积极主动，先上手为主 2、中策：\n控制对手，用摆短制约对手打发球抢攻，不让对手抢先上手 3、下策：\n主动劈长，对方轻拉之后，再来衔接第二板的反冲，主动去防守 注意事项 接正手位短球时，上半身的重心要保持稳定，下半身的重心要提起来，脚后跟抬起。这样拉球可以抢到高点，搓球时也有空间可以能控制住球。 在接短球的时候，手不能低，否则球容易冒高。重心要插到台子里。 接发球时要根据来球灵活调整步法，对方发短球可以通过并步上台内接。对方发长球，可以用小碎步往后退，找到最佳位置从容出手。 在接发球练习中，步法站位不要定在一点，短球可以上，长球也可以下。 对方发来长球之后，自己要在步法上做出调整，往后退半步再出手，才能充分发力。 接发球时如果判断准确了，等好的球就可以下手凶一点，等不好的球还是以稳为主。 ","permalink":"https://edinik.com/posts/life/table-tennis-serve-receive/","summary":"\u003c!DOCTYPE HTML\u003e EP 34 长球和短球 观察对方发球的第一个落点，如果比较靠近台内的话，就是短球，如果比较靠近台外的话，就是长球。 旋转的判断 旋转球 在对方球拍接触球时的一刹那，观察发力方向。 如果接触球时，没有发力摩擦，只是碰过来的，那么就是没有加转的球。 如果接触球时，有发力摩擦，那么就是有加转的球。 侧旋","title":"乒乓球 | 接发球"},{"content":"云服务器/VPS 的配置 1、方式一：使用一键脚本安装 缺点：无法自定义配置，只能使用脚本默认设置\n1、推荐非host模式下执行以下脚本（可以共享主机端口）\nhost模式无法映射docker端口到主机 非host模式下会将docker的80端口映射到主机的8443端口\n# 非host模式安装 bash -c \u0026#34;$(curl -s http://docker.xiaoya.pro/update_new.sh)\u0026#34; # host模式安装 bash -c \u0026#34;$(curl -s http://docker.xiaoya.pro/update_new.sh)\u0026#34; -s host 2、输入阿里云盘的Token\n阿里云盘的Token获取教程\n3、输入阿里云盘Open的Token\n阿里云盘Open的Token获取教程\n4、设置转存目录ID\n打开阿里云盘 进入转存目录 拷贝地址栏中fold/后一串ID 5、设置强制登录\n也可以通过vim等编辑器创建一个guestlogin.txt文件，内容可为空 若需要取消强制登录，则可以删除guestlogin.txt文件\ntouch /etc/xiaoya/guestlogin.txt 6、设置自定义密码\n默认用户名：dav\nvim /etc/xiaoya/guestpass.txt 在guestpass.txt文件中输入自定义密码，最好不要包含特殊字符\n7、重启docker\nsudo systemctl restart docker 8、通过Cloudfare或其它DNS解析服务将域名解析到服务器\n9、通过宝塔界面将域名反代到8443端口，并开启https\n10、访问域名即可\n网站需要对资源进行索引，大概会持续十几分钟\n2、方式二：手动安装 1、拉取xiaoya的docker\nrm -rf /etc/xiaoyaAlist/mytoken.txt # 删除旧的token文件 mkdir -p /etc/xiaoyaAlist # 创建配置文件夹 touch /etc/xiaoyaAlist/guestlogin.txt # 创建强制登录文件，若不需要强制登录则不创建该文件 touch /etc/xiaoyaAlist/guestpass.txt # 创建自定义密码文件 touch /etc/xiaoyaAlist/mytoken.txt # 创建token文件 touch /etc/xiaoyaAlist/myopentoken.txt # 创建open token文件 touch /etc/xiaoyaAlist/temp_transfer_folder_id.txt # 创建转存目录ID文件 # 格式：\u0026#34;xxxxxxxx\u0026#34; \u0026#34;yyyyyyyy\u0026#34; 账号可以是邮箱和手机号，手机号前面要加区号，也就是 \u0026#34;+86xxxx\u0026#34; 这样，注册如果用谷歌快捷方式登入的话是无法使用谷歌邮箱登入的（alist不支持） touch /etc/xiaoyaAlist/pikpak.txt touch /etc/xiaoyaAlist/show_my_ali.txt # 通过此文件的存在与否来决定是否加载自己的阿里云盘，若不需要加载则不创建该文件 # 配合 TVBOX的alist搜索，配置地址 https://你的域名/tvbox/my.json，格式：https://你的域名 （最后不要加 /) touch /etc/xiaoyaAlist/docker_address.txt # 挂载自己一个或多个 pikpak账号，挂载名 \u0026#34;账号\u0026#34; \u0026#34;密码\u0026#34; ，用空格分开（pikpak2 “abc@hotmail.com\u0026#34; \u0026#34;123456\u0026#34;），每行一个 挂载名不能有空格 touch /etc/xiaoyaAlist/pikpak_list.txt # 挂载自己一个或多个 pikpak分享 格式：挂载名 分享ID 分享目录 ，用空格分开（赵霸道 VNRT8Wr8BGyw1kt1HkijKR4Qo1 VNQf6ZmWE3pVWGpuFriGqyPzo1），每行一个 挂载名不能有空格 touch /etc/xiaoyaAlist/pikpakshare_list.txt # 挂载自定义分享ID 格式：挂载名 阿里分享ID(/folder前) 文件folder id(/folder后)，用空格分开，每行一个 (120T电影资源 ZpevUcDZ2Pn 636c8ba0703acd24cd44b19dd00312ef15b1e8) 挂载名不能有空格 touch /etc/xiaoyaAlist/pikpakshare_list.txt docker stop xiaoyaAlist # 停止旧的docker docker rm xiaoyaAlist # 删除旧的docker docker pull xiaoyaliu/alist:latest # 拉取最新的docker # 将配置文件夹/etc/xiaoyaAlist挂载到docker内部的/data文件夹,将docker的80端口映射到主机的8888端口,设置自动重启,设置docker名称为xiaoyaAlist,并启动docker docker run -d -p 8888:80 -v /etc/xiaoyaAlist:/data --restart=always --name=xiaoyaAlist xiaoyaliu/alist:latest 2、设置阿里云盘Token\n阿里云盘的Token获取教程\nvim /etc/xiaoyaAlist/mytoken.txt 3、设置阿里云盘Open Token\n阿里云盘Open的Token获取教程\nvim /etc/xiaoyaAlist/myopentoken.txt 4、设置转存目录ID\n打开阿里云盘 进入转存目录 拷贝地址栏中fold/后一串ID vim /etc/xiaoyaAlist/temp_transfer_folder_id.txt 5、设置自定义密码\n默认用户名：dav\nvim /etc/xiaoyaAlist/guestpass.txt 在guestpass.txt文件中输入自定义密码，最好不要包含特殊字符\n6、重启docker\nsudo systemctl restart docker 7、通过Cloudfare或其它DNS解析服务将域名解析到服务器\n8、通过宝塔界面将域名反代到8443端口，并开启https\n9、访问域名即可\n网站需要对资源进行索引，大概会持续十几分钟\n定时与网站同步数据 crontab -e 0 6 * * * docker restart xiaoyaAlist 如何使用 1、potplayer 2、nplayer 参考资料 [1] 如何设置xiaoya的docker [2] AList文档\n","permalink":"https://edinik.com/posts/tech/build-online-player-alist/","summary":"云服务器/VPS 的配置 1、方式一：使用一键脚本安装 缺点：无法自定义配置，只能使用脚本默认设置 1、推荐非host模式下执行以下脚本（可以共享主机端口） host模式无法映射docker端口到主机 非host模式下会将docker的80端口映射到主机的8443端口 # 非host模式安装 bash -c","title":"Alist | 在线播放服务搭建"},{"content":"宝塔面板的安装 安装宝塔界面最好全新系统安装\nDebian wget -O install.sh https://download.bt.cn/install/install-ubuntu_6.0.sh \u0026amp;\u0026amp; bash install.sh ed8484bec Ubuntu/Deepin wget -O install.sh https://download.bt.cn/install/install-ubuntu_6.0.sh \u0026amp;\u0026amp; sudo bash install.sh ed8484bec CentOS yum install -y wget \u0026amp;\u0026amp; wget -O install.sh https://download.bt.cn/install/install_6.0.sh \u0026amp;\u0026amp; sh install.sh ed8484bec nginx的安装 软件商店 -\u0026gt; Nginx -\u0026gt; 安装 docker的安装 软件商店 -\u0026gt; Docker -\u0026gt; 安装 域名解析 通过Cloudfare或其他DNS服务商解析域名到服务器IP vaultwarden的安装 不要使用默认的ADMIN_TOKEN，务必修改为一个随机的密码\ndocker run -d --restart always --name vaultwarden -e TZ=Asia/Shanghai -e ADMIN_TOKEN=some_random_token -v /vaultwarden-data/:/data/ -p 8443:80 vaultwarden/server:latest -d：指定容器运行于前台或者后台（默认为 false 表示后台） \u0026ndash;restart always：自动启动（在宿主机重启后或者 Docker 服务重启后） \u0026ndash;name vaultwarden：指定容器名称为 vaultwarden -e TZ=Asia/Shanghai：设置时区 -e LOG_FILE=/data/log/vaultwarden.log：设置日志文件路径 -e ADMIN_TOKEN=some_random_token：设置 ADMIN_TOKEN 环境变量以启用管理页面 -v /vaultwarden-data/:/data/：挂载容器的 data 目录到宿主机的 vaultwarden-data 目录上 -p 8443:80：指定容器的 80 端口暴露在宿主机的 8443 端口上 vaultwarden的配置 配置完反向代理和SSL证书后，需要重启Nginx\n1、通过宝塔面板配置反向代理 站点 -\u0026gt; 添加站点 -\u0026gt; 反向代理 -\u0026gt; 映射8443端口到域名 2、通过宝塔面板配置SSL证书 站点 -\u0026gt; 站点管理 -\u0026gt; 证书 -\u0026gt; 申请证书 -\u0026gt; 选择域名 -\u0026gt; 选择证书类型 -\u0026gt; 提交申请 3、管理界面 地址：https://域名/admin 密码：ADMIN_TOKEN字段设置的值 禁止新用户注册：\nAllow new signups：false 注册新用户：\nUsers-\u0026gt;Invite User-\u0026gt;输入邮箱 浏览器输入域名-\u0026gt;进入登录界面-\u0026gt;注册 更新vaultwarden 1、拉取最新版本的稳定版镜像\n# 拉取最新版本的稳定版镜像 docker pull vaultwarden/server:latest 2、停止旧版本容器\n# 停止旧版本容器 docker stop vaultwarden 3、移除旧版本容器\n# 移除旧版本容器 docker rm vaultwarden 4、使用已挂载的数据创建新的容器\n注意修改ADMIN_TOKEN的值\n# 使用已挂载的数据创建新的容器 docker run -d --restart always --name vaultwarden -e TZ=Asia/Shanghai -e ADMIN_TOKEN=some_random_token -v /vaultwarden-data/:/data/ -p 8443:80 vaultwarden/server:latest 自动备份数据 1、创建 Dropbox 应用 登录 Dropbox 后，打开 App Console 页面，点击 Create app 按钮创建一个 App Choose an API → 勾选 Scoped access Choose the type of access you need → 选择 App folder Name your app → 输入 App 名称（必须是不存在的名称，已存在会有提示已被占用），此名称会作为 Dropbox 上此 App 可读写的文件夹名称 创建成功后，进入应用 在 Permissions 选项卡下的 Files and folders 部分，勾选Files.metadata.write、Files.metadata.read、Files.content.write、Files.content.read四个权限, 点击页面下方Submit 按钮保存 2、上传并配置脚本 SSH 定位到 VPS 的 root 目录，下载 dropbox_uploader.sh 脚本文件并赋予可执行权限，然后运行脚本：\nwget https://raw.github.com/andreafabrizi/Dropbox-Uploader/master/dropbox_uploader.sh chmod +x dropbox_uploader.sh # 赋予可执行权限 ./dropbox_uploader.sh # 运行此脚本配置 access token 输入App key 输入App secret 点击认证链接，登录 Dropbox 账号并授权，获取访问码 输入访问码 修改访问码：\nvim .dropbox_uploader 3、创建自己的备份脚本 vim /root/vaultwarden-data_backup.sh 复制并粘帖如下内容：\n# 这个改成你存放刚刚下载下来的 dropbox_uploader.sh 的文件夹位置 SCRIPT_DIR=\u0026#34;/root\u0026#34; # 这个改成你的备份文件想要放在 Dropbox 上的文件夹名称，如果不存在，脚本会自动创建 BACK_DIR=\u0026#34;/vaultwarden-data\u0026#34; # 这个是你想要备份的本地 VPS 上的文件夹，不同的目录用空格分开 BACKUP_SRC=\u0026#34;/vaultwarden-data\u0026#34; # 这个是你暂时存放备份压缩文件的地方，这里我们放在 /tmp/vaultwarden-data-backup 下 BACKUP_DST=\u0026#34;tmp/vaultwarden-data-backup\u0026#34; # 定义备份文件的名称 ## 定义当前日期的备份文件 BACKUP_FILE=vaultwarden-data_$(date +\u0026#34;%Y-%m-%d\u0026#34;).tar.gz ## 定义 6 天前的备份文件 OLD_BACKUP_FILE_6=vaultwarden-data_$(date -d -6day +\u0026#34;%Y-%m-%d\u0026#34;).tar.gz ## 定义 15 天前的备份文件 OLD_BACKUP_FILE_15=vaultwarden-data_$(date -d -15day +\u0026#34;%Y-%m-%d\u0026#34;).tar.gz # 删除 VPS 上 6 天前的备份文件 rm -rf \u0026#34;$BACKUP_DST/$OLD_BACKUP_FILE_6\u0026#34; # 对备份文件夹进行压缩打包 tar zcf \u0026#34;$BACKUP_DST/$BACKUP_FILE\u0026#34; $BACKUP_SRC # 上传备份文件到 Dropbox $SCRIPT_DIR/dropbox_uploader.sh upload \u0026#34;$BACKUP_DST/$BACKUP_FILE\u0026#34; \u0026#34;$BACK_DIR/$BACKUP_FILE\u0026#34; # 删除 Dropbox 上 15 天前的备份文件 $SCRIPT_DIR/dropbox_uploader.sh delete \u0026#34;$BACK_DIR/$OLD_BACKUP_FILE_15\u0026#34; 赋予可执行权限：\nchmod +x /root/vaultwarden-data_backup.sh 创建备份文件夹：\ncd ~ mkdir tmp cd tmp mkdir vaultwarden-data-backup 输入 ./vaultwarden-data_backup.sh 手动执行脚本，以测试能否成功备份。\n4、创建自动执行任务 crontab -e # 打开定时任务 0 4 * * * /root/vaultwarden-data_backup.sh # 添加一行新任务：每天凌晨 4 点自动执行此脚本 service crond restart # 重启定时任务 日志转储 如果你想保留日志记录，又不希望日志记录文件变得越来越大，可以设置定期转储日志记录。\n创建日志转储规则文件：\nvim /etc/logrotate.d/vaultwarden 复制并粘帖如下内容：\n# 其他配置项使用 logrotate 配置文件 /etc/logrotate.conf 中的默认值 /vaultwarden-data/log/vaultwarden.log { daily rotate 30 missingok copytruncate noolddir dateext postrotate find /vaultwarden-data/log/ -name vaultwarden.log\u0026#34;-`(date +%Y%m%d)`\u0026#34; -exec mv {} /vaultwarden-data/log/vaultwarden\u0026#34;-`(date +%Y%m%d)`\u0026#34;.log \\; endscript } 这里设置为每天转储一次（如果日志记录比较少也可以设置为每周或每月），并保留 30 个转储的日志记录文件。\n配置解释：\ndaily：daily 指定转储周期为每天。也可以为 weekly/monthly 。默认为 weekly。 rotate 30：表示转储备份的数量。这里为 30 个。 missingok：在日志转储期间，任何错误将被忽略。 copytruncate：用于还在打开中的日志文件。把当前日志截断并备份，然后再清空。由于备份和清空之间有一个时间差，可能会丢失部分日志数据。 noolddir：转储后的日志文件和当前日志文件放在同一个目录下。 dateext：指定转储后的日志文件以当前日期格式结尾。如 vaultwarden.log-20201020。 postrotate/endscript：在转储之后需要执行的命令可以放入这个语句对中，这两个关键字必须单独成行。同样，prerotate/endscript 表示在转储之前需要执行的命令。 参考资料 宝塔面板官方网站 Vaultwarden部署和使用 ","permalink":"https://edinik.com/posts/tech/establishing-bitwarden-server/","summary":"宝塔面板的安装 安装宝塔界面最好全新系统安装 Debian wget -O install.sh https://download.bt.cn/install/install-ubuntu_6.0.sh \u0026amp;\u0026amp; bash install.sh ed8484bec Ubuntu/Deepin wget -O install.sh https://download.bt.cn/install/install-ubuntu_6.0.sh \u0026amp;\u0026amp; sudo bash install.sh ed8484bec CentOS yum install -y wget \u0026amp;\u0026amp; wget -O install.sh https://download.bt.cn/install/install_6.0.sh \u0026amp;\u0026amp; sh install.sh ed8484bec nginx的安装 软件商店 -\u0026gt; Nginx -\u0026gt; 安装 docker的安装 软件商店 -\u0026gt; Docker -\u0026gt; 安装 域名解析 通过Cloudfare或其他DNS服务商解析域名到服务器IP vaultwarden的安装 不要使","title":"vaultwarden  | 个人密码管理器搭建"},{"content":"一个节点 flowchart LR 北京 flowchart LR 北京 一个带文本的节点 flowchart LR 北京[北京是中国的首都] flowchart LR 北京[北京是中国的首都] 流程图方向 从左到右 flowchart LR 北京--\u0026gt;上海 flowchart LR 北京--\u003e上海 从右到左 flowchart RL 北京--\u0026gt;上海 flowchart RL 北京--\u003e上海 从上到下 flowchart TB 北京--\u0026gt;上海 flowchart TB 北京--\u003e上海 从下到上 flowchart BT 北京--\u0026gt;上海 flowchart BT 北京--\u003e上海 节点样式 圆角节点 flowchart LR 北京(北京是中国的首都) flowchart LR 北京(北京是中国的首都) 半圆弧节点 flowchart LR 开始([开始]) flowchart LR 开始([开始流程]) 子流程节点 flowchart LR 子流程[[这是一个子流程]] flowchart LR 子流程[[这是一个子流程]] 圆柱形节点 flowchart LR 数据库[(数据库)] flowchart LR 数据库[(数据库)] 圆形节点 flowchart LR 圆形((这是一个圆形)) flowchart LR 圆形((这是一个圆形)) 非对称形状节点 flowchart LR 非对称形状\u0026gt;这是一个非对称形状] flowchart LR 非对称形状\u003e这是一个非对称形状] 菱形节点 flowchart LR 菱形{这是一个菱形} flowchart LR 菱形{这是一个菱形} 六边形节点 flowchart LR 六边形{{这是一个六边形}} flowchart LR 六边形{{这是一个六边形}} 平行四边形节点 flowchart LR 平行四边形[/这是一个平行四边形/] flowchart LR 平行四边形[/这是一个平行四边形/] flowchart LR 平行四边形[\\这是一个平行四边形\\] flowchart LR 平行四边形[\\这是一个平行四边形\\] 梯形节点 flowchart LR 梯形[/这是一个梯形\\] flowchart LR 梯形[/这是一个梯形\\] flowchart LR 梯形[\\这是一个梯形/] flowchart LR 梯形[\\这是一个梯形/] 双重圆环节点 flowchart LR 双重圆环(((这是一个双重圆环))) flowchart LR 双重圆环(((这是一个双重圆环))) 节点之间的链接 带箭头的链接 flowchart LR 北京--\u0026gt;上海 flowchart LR 北京--\u003e上海 开放的链接 flowchart LR 北京---上海 flowchart LR 北京---上海 链接上的文字 flowchart LR 北京---|G30|上海 flowchart LR 北京---|G30|上海 带有箭头和文本的链接 flowchart LR 北京--\u0026gt;|G30|上海 flowchart LR 北京--\u003e|G30|上海 虚线链接 flowchart LR 北京-.-\u0026gt;上海 flowchart LR 北京-.-\u003e上海 带文本的虚线链接 flowchart LR 北京-.-\u0026gt;|G30|上海 flowchart LR 北京-.-\u003e|G30|上海 加粗链接 flowchart LR 北京==\u0026gt;上海 flowchart LR 北京==\u003e上海 带文本的加粗链接 flowchart LR 北京==\u0026gt;|G30|上海 flowchart LR 北京==\u003e|G30|上海 链式链接 flowchart LR 北京--\u0026gt;上海--\u0026gt;广州 flowchart LR 北京--\u003e|G30|上海--\u003e|G40|广州 flowchart LR 北京--\u0026gt;上海 \u0026amp; 杭州--\u0026gt;广州 flowchart LR 北京--\u003e上海 \u0026 杭州--\u003e广州 flowchart LR 上海 \u0026amp; 杭州--\u0026gt;广州 \u0026amp; 深圳 flowchart TB 上海 \u0026 杭州--\u003e广州 \u0026 深圳 新型箭头链接 flowchart LR 北京 --o 上海 --x 广州 flowchart LR 北京 --o 上海 --x 广州 双向箭头 flowchart LR 北京\u0026lt;--\u0026gt;上海o--o广州x--x深圳 flowchart LR 北京 \u003c--\u003e 上海 o--o 广州 x--x 深圳 链接的最小长度 flowchart TB A[开始] --\u0026gt; B[输入用户名和密码] B --\u0026gt; C{认证成功 ?} C --\u0026gt;|是| D[登录成功] C --\u0026gt;|否| E[登录失败] D --\u0026gt; F[进入系统] F ----\u0026gt; I E --\u0026gt; G{是否重新登录 ?} G --\u0026gt;|是| B G --\u0026gt;|否| H[退出系统] H --\u0026gt; I[结束] flowchart TB A[开始] --\u003e B[输入用户名和密码] B --\u003e C{认证成功 ?} C --\u003e|是| D[登录成功] C --\u003e|否| E[登录失败] D --\u003e F[进入系统] F ----\u003e I E --\u003e G{是否重新登录 ?} G --\u003e|是| B G --\u003e|否| H[退出系统] H --\u003e I[结束] 特殊字符 flowchart LR A[\u0026#34;这是一个(括号)字符\u0026#34;] flowchart LR A[\"这是一个(括号)字符\"] 转义字符的代码 flowchart LR A[\u0026#34;这是一个双引号:#quot;\u0026#34;] --\u0026gt; B[\u0026#34;这是一个单引号:#39;\u0026#34;] --\u0026gt; C[\u0026#34;这是一个爱心:#9829;\u0026#34;] flowchart LR A[\"这是一个双引号:#quot;\"] --\u003e B[\"这是一个单引号:#39;\"] --\u003e C[\"这是一个爱心:#9829;\"] 子图表 flowchart TB subgraph one[中国] c1[北京]--\u0026gt;c2[上海] end subgraph two[日本] b1[东京]--\u0026gt;b2[大阪] end subgraph three[美国] a1[纽约]--\u0026gt;a2[华盛顿] end a1--\u0026gt;c2 flowchart TB subgraph one[中国] c1[北京]--\u003ec2[上海] end subgraph two[日本] b1[东京]--\u003eb2[大阪] end subgraph three[美国] a1[纽约]--\u003ea2[华盛顿] end a1--\u003ec2 flowchart TB subgraph one[美国] a1[纽约]--\u0026gt;a2[华盛顿] end subgraph two[日本] b1[东京]--\u0026gt;b2[大阪] end subgraph three[中国] c1[北京]--\u0026gt;c2[上海] end c1--\u0026gt;a2 one--\u0026gt;two three--\u0026gt;two two--\u0026gt;c2 flowchart TB subgraph one[美国] a1[纽约]--\u003ea2[华盛顿] end subgraph two[日本] b1[东京]--\u003eb2[大阪] end subgraph three[中国] c1[北京]--\u003ec2[上海] end c1--\u003ea2 one--\u003etwo three--\u003etwo two--\u003ec2 子图表中的方向 flowchart LR subgraph 10[中国] direction TB subgraph 11[北京] direction LR 111[东城区] 112[西城区] 113[朝阳区] 111--\u0026gt;112--\u0026gt;113 end subgraph 12[上海] direction TB 121[黄浦区] 122[徐汇区] 123[长宁区] 121--\u0026gt;122--\u0026gt;123 end end A[美国]--\u0026gt;10[中国] --\u0026gt;B[日本] 11 --\u0026gt; 12 flowchart LR subgraph 10[中国] direction TB subgraph 11[北京] direction LR 111[东城区] 112[西城区] 113[朝阳区] 111--\u003e112--\u003e113 end subgraph 12[上海] direction TB 121[黄浦区] 122[徐汇区] 123[长宁区] 121--\u003e122--\u003e123 end end A[美国]--\u003e10[中国] --\u003eB[日本] 11 --\u003e 12 交互 flowchart LR A[Google] B[Github] C[Wikipedia] A--\u0026gt;B--\u0026gt;C click A \u0026#34;https://www.google.com\u0026#34; \u0026#34;google\u0026#34; click A href \u0026#34;https://www.google.com\u0026#34; \u0026#34;google\u0026#34; click B \u0026#34;https://www.github.com\u0026#34; \u0026#34;github\u0026#34; click B href \u0026#34;https://www.github.com\u0026#34; \u0026#34;github\u0026#34; click C \u0026#34;https://www.wikipedia.org\u0026#34; \u0026#34;wikipedia\u0026#34; click C href \u0026#34;https://www.wikipedia.org\u0026#34; \u0026#34;wikipedia\u0026#34; flowchart LR A[Google] B[Github] C[Wikipedia] A--\u003eB--\u003eC click A \"https://www.google.com\" \"google\" click A href \"https://www.google.com\" \"google\" click B \"https://www.github.com\" \"github\" click B href \"https://www.github.com\" \"github\" click C \"https://www.wikipedia.org\" \"wikipedia\" click C href \"https://www.wikipedia.org\" \"wikipedia\" 注释 flowchart LR %% 这是一段注释 %% 这是另一段注释 A[Google] B[Github] C[Wikipedia] A--\u0026gt;B--\u0026gt;C flowchart LR %% 这是一段注释 %% 这是另一段注释 A[Google] B[Github] C[Wikipedia] A--\u003eB--\u003eC ","permalink":"https://edinik.com/posts/tech/guide-to-using-mermaid-flowcharts/","summary":"一个节点 flowchart LR 北京 flowchart LR 北京 一个带文本的节点 flowchart LR 北京[北京是中国的首都] flowchart LR 北京[北京是中国的首都] 流程图方向 从左到右 flowchart LR 北京--\u0026gt;上海 flowchart LR 北京--\u003e上海 从右到左 flowchart RL 北京--\u0026gt;上海 flowchart RL 北京--\u003e上海 从上到下 flowchart TB 北京--\u0026gt;上海 flowchart TB 北京--\u003e上海 从下到上 flowchart BT 北京--\u0026g","title":"mermaid | 流程图"},{"content":" Edinik\u0026#39;s Blog 一个记录技术、阅读、生活的博客 Peter\u0026#39;s Blog 累点滴技术，品百味人生。 👉友链格式 名称： Edinik\u0026rsquo;s Blog 网址： https://edinik.com 图标： https://edinik.com/img/logo.jpg 描述： 一个记录技术、阅读、生活的博客 👉友链申请要求 秉承互换友链原则、文章定期更新、不能有太多广告、个人描述字数控制在15字内 ","permalink":"https://edinik.com/links/","summary":"Edinik\u0026#39;s Blog 一个记录技术、阅读、生活的博客 Peter\u0026#39;s Blog 累点滴技术，品百味人生。 👉友链格式 名称： Edinik\u0026rsquo;s Blog 网址： https://edinik.com 图标： https://edinik.com/img/logo.jpg 描述： 一个记录技术、阅读、生活的博客 👉友链申请要求 秉承互换友链原则、文章定期更新、不能有太多广告、个人描述字数控制在15字内","title":"🤝 友链"},{"content":"近期观影 🔗 9.5 权力的游戏 第六季 9.4 权力的游戏 第五季 8.6 银河护卫队3 9.5 机智医生生活 第二季 近期阅读 🔗 9.2 白夜行 8.7 我的天才女友 7.6 亲密关系：通往灵魂的桥梁 8.3 富爸爸，穷爸爸 ","permalink":"https://edinik.com/about/","summary":"近期观影 🔗 9.5 权力的游戏 第六季 9.4 权力的游戏 第五季 8.6 银河护卫队3 9.5 机智医生生活 第二季 近期阅读 🔗 9.2 白夜行 8.7 我的天才女友 7.6 亲密关系：通往灵魂的桥梁 8.3 富爸爸，穷爸爸","title":"🙋🏻‍♂️ 关于"},{"content":"C# 的 System.IO.Compression 命名空间中提供了 ZipArchive 类，它可以用于创建、打开和操作 ZIP 文件。下面是一些常见的用法示例：\n创建zip文件 要创建一个 ZIP 文件，需要使用 ZipArchive 类的构造函数来创建一个实例，并将其与输出流（例如文件流）相关联。然后使用 CreateEntry 方法在 ZIP 文件中添加条目。\nusing System.IO.Compression; using var stream = new FileStream(\u0026#34;example.zip\u0026#34;, FileMode.Create); using var zip = new ZipArchive(stream, ZipArchiveMode.Create); var entry = zip.CreateEntry(\u0026#34;example.txt\u0026#34;); using var writer = new StreamWriter(entry.Open()); writer.Write(\u0026#34;Hello world!\u0026#34;); 从zip文件中读取条目 要从 ZIP 文件中读取条目，需要使用 ZipArchive 类的构造函数来创建一个实例，并将其与输入流（例如文件流）相关联。然后使用 GetEntry 方法来获取条目，并使用 Open 方法来获取条目的输入流。\nusing System.IO.Compression; using var stream = new FileStream(\u0026#34;example.zip\u0026#34;, FileMode.Open); using var zip = new ZipArchive(stream, ZipArchiveMode.Read); foreach (var entry in zip.Entries) { Console.WriteLine($\u0026#34;Entry:{entry.FullName},Size:{entry.Length} bytes\u0026#34;); using var reader = new StreamReader(entry.Open()); Console.WriteLine(reader.ReadToEnd()); } 修改 zip 文件 要修改一个 ZIP 文件，可以使用 ZipArchive 类的 CreateEntry 方法创建新条目，或者使用 GetEntry 方法获取现有条目并修改其内容。可以使用 Delete 方法删除现有条目。\nusing System.IO.Compression; using var stream = new FileStream(\u0026#34;example.zip\u0026#34;, FileMode.OpenOrCreate); using var zip = new ZipArchive(stream, ZipArchiveMode.Update); // 添加一个新的条目 var entry1 = zip.CreateEntry(\u0026#34;new.txt\u0026#34;); using (var writer = new StreamWriter(entry1.Open())) { writer.Write(\u0026#34;This is a new file.\u0026#34;); } // 修改一个已存在的条目 var entry2 = zip.GetEntry(\u0026#34;example.txt\u0026#34;); if (entry2 != null) { using var writer = new StreamWriter(entry2.Open()); writer.Write(\u0026#34;This file has been modified.\u0026#34;); } // 删除一个已存在的条目 var entry3 = zip.GetEntry(\u0026#34;old.txt\u0026#34;); entry3?.Delete(); ","permalink":"https://edinik.com/posts/tech/usage-of-ziparchive-in-csharp/","summary":"C# 的 System.IO.Compression 命名空间中提供了 ZipArchive 类，它可以用于创建、打开和操作 ZIP 文件。下面是一些常见的用法示例： 创建zip文件 要创建一个 ZIP 文件，需要使用 ZipArchive 类的构造函数来创建一个实例，并将其与输出流（例如文件流）相关联。然后使用 CreateEntry 方法在 ZIP 文件中添加条目。 using System.IO.Compression; using var stream = new FileStream(\u0026#34;example.zip\u0026#34;, FileMode.Create); using var zip = new ZipArchive(stream, ZipArchiveMode.Create); var entry = zip.CreateEntry(\u0026#34;example.txt\u0026#34;); using var writer = new StreamWriter(entry.Open());","title":"csharp | ziparchive的用法"},{"content":"介绍 在C#编程中，string和StringBuilder是两种常用的字符串类型，它们在应用场景和性能上有着明显的差异。string是不可变的字符串类型，一旦创建就不能修改，因此它适用于需要频繁读取而不需要修改的场景；而StringBuilder是可变的字符串类型，可以在原有的字符串上进行修改，适用于需要频繁修改字符串的场景。\n本文将从定义、区别、应用场景和性能等方面介绍string和StringBuilder的差异，并进行性能比较，希望能够帮助读者更好地理解和应用这两种字符串类型\nstring和StringBuilder的基本概念 string string是C#中的一种不可变字符串类型，表示一个字符串对象，它存储在堆内存中。一旦创建了一个string对象，就不能修改它的值，而是创建一个新的string对象。这种不可变性带来了一些优点，例如更安全、更容易缓存、更容易共享等，但也带来了一些性能问题，例如频繁地创建和销毁对象会占用大量的内存和CPU时间。\nStringBuilder StringBuilder是C#中的一种可变字符串类型，表示一个字符串缓冲区，它也存储在堆内存中。与string不同，StringBuilder对象可以在原有的字符串缓冲区上进行修改，而不需要创建新的对象。因此，StringBuilder适用于需要频繁修改字符串的场景，例如字符串连接、替换、插入等。\n需要注意的是，StringBuilder对象是可变的，但不是线程安全的，因此在多线程环境下，需要采取措施来确保线程安全。可以使用锁或者使用ThreadLocal类创建多个StringBuilder对象，每个线程独立使用一个StringBuilder对象，以确保线程安全。\n区别 string和StringBuilder的定义和用法 在C#中，string和StringBuilder都是用于表示字符串的类型。它们的定义和用法有所不同：\nstring:\nstring str = \u0026#34;hello\u0026#34;; StringBuilder：\nStringBuilder sb = new StringBuilder(\u0026#34;hello\u0026#34;); string对象是不可变的，一旦创建了一个string对象，就不能修改它的值，而是创建一个新的string对象。StringBuilder对象是可变的，可以在原有的字符串缓冲区上进行修改，而不需要创建新的对象。\n内存分配和管理 string和StringBuilder的内存分配和管理方式也不同。\nstring对象的内存是在堆内存上分配的，它的生命周期由垃圾回收器控制。当string对象不再被引用时，它的内存将被垃圾回收器自动回收。\nStringBuilder对象也是在堆内存上分配的，但是它使用了可变大小的内部缓冲区。当StringBuilder对象的缓冲区不足以存储新的字符时，它会自动重新分配一个更大的缓冲区，同时将旧的缓冲区释放掉。这个过程会导致一定的性能开销，但是可以避免频繁创建和销毁对象，从而减少了内存压力。\n字符串连接和修改方式 string和StringBuilder的字符串连接和修改方式也不同。\n对于string对象，每次连接两个字符串时，都会创建一个新的string对象，这样会导致频繁地创建和销毁对象，从而占用大量的内存和CPU时间。\n例如：\nstring str = \u0026#34;hello\u0026#34;; str += \u0026#34; world\u0026#34;; 上述代码会创建两个string对象，一个是\u0026quot;hello\u0026quot;，另一个是\u0026quot; world\u0026quot;，然后再将它们连接起来，创建一个新的string对象\u0026quot;hello world\u0026quot;。这个过程中创建了三个string对象，即\u0026quot;hello\u0026quot;、\u0026quot; world\u0026quot;和\u0026quot;hello world\u0026quot;。\n对于StringBuilder对象，每次连接两个字符串时，它会在原有的字符串缓冲区上进行修改，而不需要创建新的对象。这样可以避免频繁地创建和销毁对象，从而减少了内存和CPU的开销。\n例如：\nStringBuilder sb = new StringBuilder(\u0026#34;hello\u0026#34;); sb.Append(\u0026#34; world\u0026#34;); 上述代码只创建了一个StringBuilder对象，然后在它的缓冲区上添加了一个新的字符串\u0026quot; world\u0026quot;，最终得到的字符串是\u0026quot;hello world\u0026quot;。这个过程中只创建了一个StringBuilder对象，没有创建任何新的string对象。\n总之，string适用于需要频繁读取而不需要修改的场景，而StringBuilder适用于需要频繁修改字符串的场景。需要根据实际的业务需求选择合适的字符串类型。\n应用场景 string的适用场景 string适用于需要频繁读取而不需要修改的场景，例如：\n字符串常量 字符串的比较、查找、截取等操作 字符串的格式化输出 例如：\nstring str1 = \u0026#34;hello\u0026#34;; // 字符串常量 string str2 = \u0026#34;world\u0026#34;; string str3 = str1 + \u0026#34; \u0026#34; + str2; // 字符串连接 if (str1.Equals(\u0026#34;hello\u0026#34;)) // 字符串比较 { Console.WriteLine(\u0026#34;str1 equals hello\u0026#34;); } string substr = str3.Substring(0, 5); // 字符串截取 Console.WriteLine(substr); string formatstr = string.Format(\u0026#34;str1={0}, str2={1}\u0026#34;, str1, str2); // 字符串格式化输出 Console.WriteLine(formatstr); StringBuilder的适用场景 StringBuilder适用于需要频繁修改字符串的场景，例如：\n大量字符串的连接 大量字符串的替换、插入等操作 例如：\nStringBuilder sb = new StringBuilder(\u0026#34;hello\u0026#34;); for (int i = 0; i \u0026lt; 10000; i++) { sb.Append(\u0026#34; world\u0026#34;); // 大量字符串的连接 } string str = sb.ToString(); Console.WriteLine(str); sb.Replace(\u0026#34;world\u0026#34;, \u0026#34;csharp\u0026#34;); // 大量字符串的替换 sb.Insert(0, \u0026#34;welcome to \u0026#34;); // 大量字符串的插入 string newstr = sb.ToString(); Console.WriteLine(newstr); 总之，需要根据实际的业务需求选择合适的字符串类型，避免不必要的性能开销。如果需要频繁修改字符串，建议使用StringBuilder，否则可以使用string。同时，对于大量的字符串操作，建议使用StringBuilder，可以避免频繁地创建和销毁string对象，提高性能。\n性能比较 对于字符串的操作，性能是一个非常重要的指标。下面通过实验对比string和StringBuilder的性能。\n实验方法 通过一个循环，分别使用string和StringBuilder对字符串进行10000次的连接操作，然后计算每次操作的耗时。具体代码如下：\nusing System; using System.Diagnostics; using System.Text; namespace StringTest { class Program { static void Main(string[] args) { // test string string str = \u0026#34;\u0026#34;; Stopwatch sw = new Stopwatch(); sw.Start(); for (int i = 0; i \u0026lt; 10000; i++) { str += \u0026#34;hello world\u0026#34;; } sw.Stop(); Console.WriteLine(\u0026#34;test string: \u0026#34; + sw.ElapsedMilliseconds + \u0026#34; ms\u0026#34;); // test StringBuilder StringBuilder sb = new StringBuilder(); sw.Reset(); sw.Start(); for (int i = 0; i \u0026lt; 10000; i++) { sb.Append(\u0026#34;hello world\u0026#34;); } sw.Stop(); Console.WriteLine(\u0026#34;test StringBuilder: \u0026#34; + sw.ElapsedMilliseconds + \u0026#34; ms\u0026#34;); } } } 比较结果 在我的机器上，运行以上代码，得到的实验结果如下：\ntest string: 235 ms test StringBuilder: 0 ms 可以看到，使用string进行字符串连接的耗时是235毫秒，而使用StringBuilder进行字符串连接的耗时只有0毫秒，相差非常明显。\n这是因为，string在进行字符串连接时，每次连接都会创建一个新的string对象，而原有的string对象则成为垃圾对象，需要进行垃圾回收。而StringBuilder则通过修改自身的内部缓冲区来进行字符串连接，避免了频繁创建和销毁string对象，因此速度更快。\n因此，对于大量字符串的连接操作，建议使用StringBuilder，可以显著提高性能。\n总结 本文介绍了C#编程中string和StringBuilder的区别、各自的应用场景和性能比较。\n可以看到，string适用于需要频繁读取而不需要修改的场景，例如字符串常量、比较、查找、截取、格式化输出等操作。而StringBuilder适用于需要频繁修改字符串的场景，例如大量字符串的连接、替换、插入等操作。\n在性能方面，使用string进行字符串连接的耗时是比较大的，而使用StringBuilder进行字符串连接的耗时则很小，可以显著提高性能。因此，对于大量字符串的连接操作，建议使用StringBuilder，避免不必要的性能开销。\n总之，根据实际的业务需求选择合适的字符串类型，可以有效地提高程序的性能和效率。\n参考文献 [1] Microsoft Docs. String Class. https://docs.microsoft.com/en-us/dotnet/api/system.string?view=net-6.0\n[2] Microsoft Docs. StringBuilder Class. https://docs.microsoft.com/en-us/dotnet/api/system.text.stringbuilder?view=net-6.0\n[3] C# Program Examples. Difference between String and StringBuilder in C#. https://www.c-sharpcorner.com/article/difference-between-string-and-stringbuilder-in-c-sharp/\n","permalink":"https://edinik.com/posts/tech/difference-between-string-and-stringbuilder-in-csharp/","summary":"介绍 在C#编程中，string和StringBuilder是两种常用的字符串类型，它们在应用场景和性能上有着明显的差异。string是不可变的字符串类型，一旦创建就不能修改，因此它适用于需要频繁读取而不需要修改的场景；而StringBuilder是可变的字符串类型，可以在原有的字","title":"csharp | string vs stringbuilder"},{"content":"","permalink":"https://edinik.com/bbs/","summary":"","title":"✨ 灵感"},{"content":"","permalink":"https://edinik.com/books/","summary":"","title":"📙 阅读"},{"content":"","permalink":"https://edinik.com/movies/","summary":"","title":"🎞️ 观影"}]