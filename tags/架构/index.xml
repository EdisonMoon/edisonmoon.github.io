<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>架构 on EdisonLook</title>
    <link>https://blog.themostmoon.today/tags/%E6%9E%B6%E6%9E%84/</link>
    <description>Recent content in 架构 on EdisonLook</description>
    <image>
      <title>EdisonLook</title>
      <url>https://blog.themostmoon.today/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://blog.themostmoon.today/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 17 Mar 2023 15:04:00 +0800</lastBuildDate><atom:link href="https://blog.themostmoon.today/tags/%E6%9E%B6%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>软件架构设计总结</title>
      <link>https://blog.themostmoon.today/architecture/concluding-thoughts-on-software-architecture-design/</link>
      <pubDate>Fri, 17 Mar 2023 15:04:00 +0800</pubDate>
      
      <guid>https://blog.themostmoon.today/architecture/concluding-thoughts-on-software-architecture-design/</guid>
      <description>第一原理 定义 用最小的人力成本，最大化地满足用户需求。
属性 复杂性：数据、逻辑和算法 遵从性：接口和规范 可变性：需求变更、可扩展 不可见性：诊断工具、日志记录、性能监控 能力地图 整洁代码 易于阅读、理解和维护的高质量代码
保持代码简洁清晰：使用有意义的变量名、函数名和注释，避免冗余代码和过度复杂化的逻辑结构。 遵循 SOLID 设计原则：将大型问题分解为小问题进行解决，单一职责原则、开放封闭原则等可以帮助提高代码的可扩展性和可维护性。 编写干净的函数：函数应该只做一件事情，并且要短小精悍，依据函数名称即可推断出其作用。 做好异常处理：处理和抛出异常时，需要清晰明确地说明问题所在，避免不必要的歧义和误解。 编写自动化测试：自动化测试可以帮助发现隐藏的问题和预防后续产生的问题，同时也可以增加代码的可靠性。 使用合适的代码结构：避免长文件、长函数、深层次嵌套等导致代码难以维护的问题，可以采用模块化、面向对象等方式来组织代码结构。 编程范式 面向对象编程：以类和对象为中心，通过定义类来描述对象的属性和方法。程序通过继承和多态等机制实现代码重用和扩展。 过程式编程：以过程为中心，程序按照顺序执行。通过编写一系列函数或过程来完成任务，并通过参数传递数据。 函数式编程：以函数为中心，程序没有共享状态，可以作为参数传递和返回值使用。函数式编程遵循函数应该只做一件事情的原则，可以帮助减少代码量和提高可读性。 设计原则 SOLID 单一职责原则（Single Responsibility Principle, SRP）：一个类或模块应该只有一个单一的职责，不要把太多的功能放到同一个类或模块中。 开闭原则（Open-Closed Principle, OCP）：软件实体（类、模块等）应该对扩展开放，对修改关闭，即通过扩展代码来实现新的功能，而不是直接修改代码。 里氏替换原则（Liskov Substitution Principle, LSP）：任何使用基类对象的地方，都应该能够使用其子类对象，子类对象不能影响父类对象的行为。 接口隔离原则（Interface Segregation Principle, ISP）：客户端不应该强制依赖它们不需要的接口，将一个大型的接口拆分成多个小接口，以符合单一职责原则。 依赖倒置原则（Dependency Inversion Principle, DIP）：高层模块不应该依赖低层模块，两者都应该依赖于抽象；抽象不应该依赖于具体实现。 DRY Don&amp;rsquo;t Repeat Yourself.
相同的代码应该只存在于一个地方，不应该在多个地方重复出现。
使用函数、方法或类来封装重复的代码片段，避免代码冗余。 使用变量、常量或配置文件来存储常用的值，避免重复输入相同的内容。 使用工具、库或框架来提供通用的功能，避免重复编写相同的代码。 YAGNI You Ain&amp;rsquo;t Gonna Need It
没有必要编写不需要的代码，因为这会增加代码复杂性和维护成本。
只编写当前需要的代码，避免预先设计和编写未来可能需要的代码。 避免过度设计和复杂化的代码结构，遵循 KISS 原则（Keep It Simple, Stupid）。 使用测试驱动开发（TDD）等方法进行开发，确保只编写需要的代码，并保证代码的质量和可靠性。 Hollywood Principle 也称为反转控制（Inversion of Control, IOC）</description>
    </item>
    
  </channel>
</rss>
