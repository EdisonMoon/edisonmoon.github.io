<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CSharp on Edison&#39;s Blog</title>
    <link>https://blog.themostmoon.today/tags/csharp/</link>
    <description>Recent content in CSharp on Edison&#39;s Blog</description>
    <image>
      <title>Edison&#39;s Blog</title>
      <url>https://blog.themostmoon.today/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://blog.themostmoon.today/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 20 Mar 2023 09:12:41 +0800</lastBuildDate><atom:link href="https://blog.themostmoon.today/tags/csharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C#中ZipArchive的用法</title>
      <link>https://blog.themostmoon.today/posts/tech/usage-of-ziparchive-in-csharp/</link>
      <pubDate>Mon, 20 Mar 2023 09:12:41 +0800</pubDate>
      
      <guid>https://blog.themostmoon.today/posts/tech/usage-of-ziparchive-in-csharp/</guid>
      <description>C# 的 System.IO.Compression 命名空间中提供了 ZipArchive 类，它可以用于创建、打开和操作 ZIP 文件。下面是一些常见的用法示例： 创建ZIP文件 要创建一个 ZIP 文件，需要使用 ZipArchive 类的构造函数来创建一个实例，并将其与输出流（例如文件流）相关联。然后使用 CreateEntry 方法在 ZIP 文件中添加条目。 1 2 3 4 5 6 7 using System.IO.Compression; using var stream = new FileStream(&amp;#34;example.zip&amp;#34;, FileMode.Create); using var zip = new ZipArchive(stream, ZipArchiveMode.Create); var entry =</description>
    </item>
    
    <item>
      <title>探究C#编程中string和StringBuilder的区别、各自的应用场景和性能比较</title>
      <link>https://blog.themostmoon.today/posts/tech/difference-between-string-and-stringbuilder-in-csharp/</link>
      <pubDate>Fri, 17 Mar 2023 12:41:22 +0800</pubDate>
      
      <guid>https://blog.themostmoon.today/posts/tech/difference-between-string-and-stringbuilder-in-csharp/</guid>
      <description>介绍 在C#编程中，string和StringBuilder是两种常用的字符串类型，它们在应用场景和性能上有着明显的差异。string是不可变的字符串类型，一旦创建就不能修改，因此它适用于需要频繁读取而不需要修改的场景；而StringBuilder是可变的字符串类型，可以在原有的字</description>
    </item>
    
  </channel>
</rss>
